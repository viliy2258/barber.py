import requests
import calendar
import json
import asyncio
import re
from datetime import datetime, timedelta
import logging
import html

from telegram import InlineKeyboardButton
from telegram.helpers import escape_markdown  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
from telegram.helpers import escape_markdown as tg_escape_markdown
from telegram import CallbackQuery
from fpdf import FPDF






# Telegram API imports
from telegram import (
    Update,
    Bot,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    InputMediaPhoto,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackContext,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
from telegram.error import BadRequest, Forbidden
from telegram.helpers import escape_markdown

# Firebase imports
import firebase_admin
from firebase_admin import credentials, firestore

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print("Bot is starting...")

# ========= FIREBASE INITIALIZATION =========
with open(r"C:\Users\reset\Downloads\ton-not-firebase-adminsdk-5lvba-39b1a0ff34.json", encoding="utf-8") as f:
    cred_data = json.load(f)
cred = credentials.Certificate(cred_data)
firebase_admin.initialize_app(cred)
db = firestore.client()

# ========= TELEGRAM BOT TOKEN =========
TELEGRAM_TOKEN = "7667202033:AAE6wmv967u_-rq64XREq8ea4bRIE1mFGcI"

# ========= ADMIN & GLOBAL VARIABLES =========
ADMIN_USER_IDS = [5523891091, 6359919561]  # –ó–∞–º—ñ–Ω–∞ –Ω–∞ –≤–∞—à—ñ ID
user_selection = {}
booked_slots = {}
pending_confirmations = {}


# === –ö–ï–® –î–õ–Ø –ü–û–°–õ–£–ì (–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –∑ Firestore) ===
services_cache = {}  # { doc_id: {"name": str, "price": str, "duration": int, "active": bool} }

# –Ü–Ω—Ñ–æ –ø—Ä–æ –±–∞—Ä–±–µ—Ä–∞ (–¥–ª—è —Ä–æ–∑–¥—ñ–ª—É "–ü—Ä–æ –Ω–∞—Å")
BARBER_NAME = "NAZAR BARBER"
PHONE_NUMBER = "+380 63 338 87 38"

# –†–µ–∂–∏–º —Ä–æ–∑—Å–∏–ª–∫–∏ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤): {admin_id: bool}
admin_broadcast_mode = {}

# –°—Ç–∞–Ω –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:
ADMIN_STATE = {}  # {admin_id: state_string}

# ========= –ù–û–í–ï: –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø –†–û–ë–û–ß–û–ì–û –ì–†–ê–§–Ü–ö–ê –í –ë–î =========
# "default_schedule" –ª–µ–∂–∏—Ç—å —É –¥–æ–∫—É–º–µ–Ω—Ç—ñ schedule_config/default_schedule (–Ω–∞–∑–≤–∞ –∫–æ–ª–µ–∫—Ü—ñ—ó —á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –º–æ–∂–µ –±—É—Ç–∏ –±—É–¥—å-—è–∫–∞).
# –ö–ª—é—á—ñ: 0..6 (Mon..Sun)
# –ó–Ω–∞—á–µ–Ω–Ω—è: {"start": "HH:MM", "end": "HH:MM", "off": bool}
# –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Äî —Å—Ç–≤–æ—Ä–∏–º–æ –∑ —Ç–∞–∫–∏–º —Å—Ç–∞—Ä—Ç–æ–≤–∏–º:
INITIAL_DEFAULT_SCHEDULE = {
    0: {"start": "10:00", "end": "21:30", "off": False},  # Monday
    1: {"start": "10:00", "end": "21:30", "off": False},  # Tuesday
    2: {"start": "10:00", "end": "21:30", "off": False},  # Wednesday
    3: {"start": "10:00", "end": "21:30", "off": False},  # Thursday
    4: {"start": "10:00", "end": "21:30", "off": False},  # Friday
    5: {"start": "10:00", "end": "21:30", "off": False},  # Saturday
    6: {"start": "10:00", "end": "21:30", "off": True},  # Sunday (—Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î)
}


# –õ–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É
DEFAULT_WEEK_SCHEDULE = {}  # –±—É–¥–µ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —ñ–∑ –ë–î –Ω–∏–∂—á–µ

working_hours_mode = "default"
working_hours_default = {
    "default": [("10:00", "21:30")]
}
working_hours_kurs = {
    "default": [("10:00", "12:30"), ("18:00", "21:30")],
}

# ========= 1. –ó–ê–ì–†–£–ó–ö–ê –í–ñ–ï –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ò–• –ó–ê–ü–ò–°–Ü–í (booked_slots) =========
def load_booked_slots():
    global booked_slots
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–∞–ø–∏—Å–∏, —Å—Ç–∞—Ç—É—Å —è–∫–∏—Ö –∞–±–æ "pending", –∞–±–æ "confirmed"
    bookings = db.collection("bookings").where("status", "in", ["pending", "confirmed"]).stream()
    for booking in bookings:
        data = booking.to_dict()
        date = data.get("date")
        time = data.get("time")
        if date and time:
            booked_for_date = booked_slots.get(date, [])
            duration = data.get("duration", 30)  # fallback, —è–∫—â–æ –Ω–µ–º–∞—î
            slots_needed = duration // 30
            start_time = datetime.strptime(time, "%H:%M")
            for i in range(slots_needed):
                time_str = (start_time + timedelta(minutes=30 * i)).strftime("%H:%M")
                booked_for_date.append(time_str)
            booked_slots[date] = booked_for_date

def is_blacklisted(user_id: int) -> bool:
    doc = db.collection("users").document(str(user_id)).get()
    if doc.exists:
        return doc.to_dict().get("blacklisted", False)
    return False

def blacklist_protected(func):
    async def wrapper(update: Update, context: CallbackContext):
        user_id = update.effective_user.id if update.effective_user else None
        if user_id and is_blacklisted(user_id):
            if update.message:
                await update.message.reply_text("üö´ –í–∏ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Ç–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            elif update.callback_query:
                await safe_edit_message_text(update.callback_query, "üö´ –í–∏ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Ç–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            return  # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        return await func(update, context)
    return wrapper


# ========= 2. –ó–ê–ì–†–£–ó–ö–ê/–û–ù–û–í–õ–ï–ù–ù–Ø –°–ü–ò–°–ö–£ –ü–û–°–õ–£–ì (services_cache) =========
def refresh_services_cache():
    global services_cache
    services_cache.clear()
    services_ref = db.collection("services").stream()
    for doc in services_ref:
        data = doc.to_dict()
        services_cache[doc.id] = data

# ========= –ó–ê–ì–†–£–ó–ö–ê –î–ï–§–û–õ–¢–ù–û–ì–û –†–û–ó–ö–õ–ê–î–£ –Ü–ó –ë–î =========
def load_default_schedule_from_db():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ä–æ–∑–∫–ª–∞–¥ —ñ–∑ Firestore. –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –∑ DEFAULT_WEEK_SCHEDULE.
    """
    global DEFAULT_WEEK_SCHEDULE
    schedule_config_ref = db.collection("schedule_config").document("default_schedule")
    doc_ = schedule_config_ref.get()

    if doc_.exists:
        # –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç —ñ—Å–Ω—É—î, –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –π–æ–≥–æ –≤ new_schedule
        saved_data = doc_.to_dict()
        new_schedule = {}

        for k, v in saved_data.items():
            try:
                idx = int(k)  # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –∫–ª—é—á —î —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º
                if not isinstance(v, dict):
                    print(f"‚ö†Ô∏è Warning: Invalid schedule data for {k}: {v}. Skipping...")
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–ª—é—á—ñ
                start = v.get("start", "").strip()
                end = v.get("end", "").strip()
                off = v.get("off", None)

                if not start or not end or off is None:
                    print(f"‚ö†Ô∏è Warning: Incomplete schedule for day {k}: {v}. Using default...")
                    new_schedule[idx] = INITIAL_DEFAULT_SCHEDULE[idx]
                else:
                    new_schedule[idx] = {
                        "start": start,
                        "end": end,
                        "off": off
                    }
            except ValueError:
                print(f"‚ö†Ô∏è Error: Invalid schedule key '{k}' in Firestore. Skipping...")

        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –≤—Å—ñ 7 –¥–Ω—ñ–≤ —î –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
        for i in range(7):
            if i not in new_schedule:
                print(f"‚ö†Ô∏è Warning: Missing schedule for day {i}. Using default value.")
                new_schedule[i] = INITIAL_DEFAULT_SCHEDULE[i]

        DEFAULT_WEEK_SCHEDULE = new_schedule
        print("‚úÖ Default schedule successfully loaded from Firestore.")
    
    else:
        # –Ø–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ —É Firestore
        formatted_schedule = {str(k): v for k, v in INITIAL_DEFAULT_SCHEDULE.items()}
        schedule_config_ref.set(formatted_schedule)
        DEFAULT_WEEK_SCHEDULE = INITIAL_DEFAULT_SCHEDULE.copy()
        print("üÜï No schedule found in Firestore. Initialized with default schedule.")

def save_default_schedule_to_db():
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω–∏–π DEFAULT_WEEK_SCHEDULE –¥–æ Firestore:
    schedule_config/default_schedule
    """
    schedule_config_ref = db.collection("schedule_config").document("default_schedule")
    to_save = {}

    for i in range(7):
        day_info = DEFAULT_WEEK_SCHEDULE.get(i, {})

        # Validate fields
        start = day_info.get("start", "").strip()
        end = day_info.get("end", "").strip()
        off = day_info.get("off", None)

        if not start or not end or off is None:
            print(f"‚ö†Ô∏è Warning: Skipping invalid schedule entry for day {i}: {day_info}")
            continue  # Skip if any field is invalid

        to_save[str(i)] = {
            "start": start,
            "end": end,
            "off": off
        }

    if to_save:
        schedule_config_ref.set(to_save)
        print("‚úÖ Default schedule successfully saved to Firestore.")
    else:
        print("‚ö†Ô∏è No valid schedule data to save.")

# ========= –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =========
def escape_markdown(text, version=1):
    """–ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤ —É Markdown."""
    escape_chars = r'_*[]()~>#+-=|{}.!'

    if version == 2:
        escape_chars = r'_*[]()~>#+-=|{}.!'
    return re.sub(r'([{}])'.format(re.escape(escape_chars)), r'\\\1', text)

def safe_strptime(time_str, fmt):
    """
    –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –Ω–∞ datetime.time (–∞–±–æ datetime) –∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º fmt.
    –ü–æ–≤–µ—Ä—Ç–∞—î None, —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞.
    """
    try:
        return datetime.strptime(time_str, fmt)
    except ValueError:
        return None

async def safe_edit_message_text(query, text, reply_markup=None, parse_mode="MarkdownV2"):
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–±—É–¥–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –µ–∫—Ä–∞–Ω—é–≤–∞–Ω–Ω—è
        if parse_mode in ["Markdown", "MarkdownV2"]:
            text = tg_escape_markdown(text, version=2)

        message = query.message

        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∏—Ç—å –º–µ–¥—ñ–∞ ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
        if message.photo or message.video or message.document or message.audio:
            await message.delete()
            await query.message.chat.send_message(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return

        # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç —Ç–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
        if message.text.strip() == text.strip() and message.reply_markup == reply_markup:
            logging.info("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –≤–∏–¥–∞–ª—è—î–º–æ —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ.")
            await query.message.delete()
            await query.message.chat.send_message(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return

        # –†–µ–¥–∞–≥—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )

    except BadRequest as e:
        error_message = str(e)
        logging.warning(f"‚ö†Ô∏è Telegram BadRequest Error: {error_message}")

        if "message to edit not found" in error_message or "Message can't be edited" in error_message:
            try:
                await query.message.delete()
                await query.message.chat.send_message(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
            except Exception as e2:
                logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e2}")
        elif "Message is not modified" in error_message:
            logging.info("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –º–∞—î —Ç–∞–∫–∏–π —Å–∞–º–∏–π –≤–º—ñ—Å—Ç, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            await query.message.delete()
            await query.message.chat.send_message(text=text, reply_markup=reply_markup, parse_mode=parse_mode)
        elif "can't find end of the entity" in error_message:
            logging.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π Markdown, –ø—Ä–æ–±—É—î–º–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.")
            await query.edit_message_text(text=text, reply_markup=reply_markup)
        else:
            raise e

def get_custom_schedule_for_date(date_str):
    doc_ref = db.collection("custom_schedule").document(date_str)
    doc = doc_ref.get()
    if doc.exists:
        return doc.to_dict()
    return None

def update_day_in_db(date_str, off, start, end):
    doc_ref = db.collection("custom_schedule").document(date_str)
    doc_ref.set(
        {
            "off": off,
            "start": start,
            "end": end
        },
        merge=True
    )

def get_weekday_name_ua(weekday_index: int) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –¥–Ω—è —Ç–∏–∂–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º (0=–ø–æ–Ω–µ–¥—ñ–ª–æ–∫, 6=–Ω–µ–¥—ñ–ª—è)."""
    weekdays_uk = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]
    return weekdays_uk[weekday_index]

def get_working_hours(date: datetime.date, service_name: str):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂—ñ–≤ [(start, end), ...] –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –¥–∞—Ç–∏ (–∑ custom_schedule —á–∏ –¥–µ—Ñ–æ–ª—Ç—É).
    –Ø–∫—â–æ –¥–µ–Ω—å –≤–∏—Ö—ñ–¥–Ω–∏–π ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫.
    """
    # 1) –Ø–∫—â–æ —Ä–µ–∂–∏–º 'kurs', —Ç–æ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É —Å–≤–æ—ó –≥–æ–¥–∏–Ω–∏:
    global working_hours_mode
    if working_hours_mode == "kurs":
        weekday = date.weekday()  # Monday=0..Sunday=6
        if weekday == 5:  # –°—É–±–æ—Ç–∞
            return [("10:00", "21:00")]
        else:
            return working_hours_kurs.get("default", [])

    # 2) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ custom_schedule
    date_str = date.strftime("%d.%m.%Y")
    custom_data = get_custom_schedule_for_date(date_str)
    if custom_data:
        if custom_data["off"]:
            return []
        else:
            return [(custom_data["start"], custom_data["end"])]

    # 3) –Ø–∫—â–æ –Ω–µ–º–∞—î custom_data, –¥–∏–≤–∏–º–æ—Å—å DEFAULT_WEEK_SCHEDULE –∑ –ë–î
    weekday = date.weekday()
    day_info = DEFAULT_WEEK_SCHEDULE.get(weekday, {})
    if day_info.get("off"):
        return []
    else:
        return [(day_info["start"], day_info["end"])]

# ====== Telegram –º–µ–Ω—é (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á / –∞–¥–º—ñ–Ω) ======
async def show_user_menu(update: Update):
    keyboard = [
        ["–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø–æ—Å–ª—É–≥—É"],
        ["–ö–û–°–ú–ï–¢–ò–ö–ê", "–Ü–°–¢–û–†–Ü–Ø", "–ü—Ä–æ –Ω–∞—Å"],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    welcome_message = (
        f"–ü—Ä–∏–≤—ñ—Ç {update.effective_user.mention_html()} üëã\n"
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –±–∞—Ä–±–µ—Ä—à–æ–ø—É üíà"
    )
    if update.message:
        await update.message.reply_html(welcome_message, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.delete()
        await update.effective_chat.send_message(
            text=welcome_message,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

async def show_admin_menu(update: Update):
    """
    –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    keyboard = [
        ["üìÖ –ó–∞–ø–∏—Å–∏", "üë§ –ö–ª—ñ—î–Ω—Ç–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üíá‚Äç‚ôÇÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥"],
        ["üìÜ –†–æ–∑–∫–ª–∞–¥", "‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"],
        ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    welcome_message = (
        f"–ü—Ä–∏–≤—ñ—Ç {update.effective_user.mention_html()} üëã\n"
        f"–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üíº"
    )
    if update.message:
        await update.message.reply_html(welcome_message, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.delete()
        await update.effective_chat.send_message(
            text=welcome_message,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

@blacklist_protected
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if user_id in ADMIN_USER_IDS:
        await show_admin_menu(update)
    else:
        await show_user_menu(update)

async def kurs_command(update: Update, context: CallbackContext) -> None:
    if update.effective_user.id not in ADMIN_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    global working_hours_mode
    working_hours_mode = "kurs"
    await update.message.reply_text(
        "–†–æ–±–æ—á–∏–π —á–∞—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ 'kurs' —Ä–µ–∂–∏–º.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: 10:00-12:30 —Ç–∞ 18:00-21:30, –°—É–±–æ—Ç–∞ 10:00-21:00."
    )

async def all_command(update: Update, context: CallbackContext) -> None:
    if update.effective_user.id not in ADMIN_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    global working_hours_mode
    working_hours_mode = "default"
    await update.message.reply_text(
        "–†–æ–±–æ—á–∏–π —á–∞—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π (–Ω–µ–¥—ñ–ª—è –≤–∏—Ö—ñ–¥–Ω–∏–π)."
    )

async def cancel_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in ADMIN_USER_IDS:
        if admin_broadcast_mode.get(user_id, False):
            admin_broadcast_mode[user_id] = False
            await update.message.reply_text("–†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        if user_id in ADMIN_STATE:
            ADMIN_STATE[user_id] = None
            await update.message.reply_text("–ü–æ—Ç–æ—á–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        await update.message.reply_text("–ù–µ–º–∞ –ø–æ—Ç–æ—á–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

# ========= –ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ =========
async def about_us(update: Update, context: CallbackContext) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–∞—Ä–±–µ—Ä—à–æ–ø –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º —Ç–∏–∂–Ω–µ–≤–∏–º –≥—Ä–∞—Ñ—ñ–∫–æ–º —Ä–æ–±–æ—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–∞—Ç)."""

    # –°—Ñ–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É (7 –¥–Ω—ñ–≤)
    # –£–≤–∞–≥–∞: —Ü–µ –ª–∏—à–µ "–¥–µ–Ω—å —Ç–∏–∂–Ω—è" + –≥–æ–¥–∏–Ω–∏. Custom –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–∞—Ç —Ç—É—Ç –Ω–µ –≤—Ä–∞—Ö–æ–≤—É—î–º–æ.
    week_schedule_text = ""
    for i in range(7):
        weekday_str = get_weekday_name_ua(i)
        day_info = DEFAULT_WEEK_SCHEDULE.get(i, {"start": "??:??", "end": "??:??", "off": True})
        if day_info["off"]:
            hours = "‚ùå –í–∏—Ö—ñ–¥–Ω–∏–π"
        else:
            hours = f"{day_info['start']} - {day_info['end']}"
        week_schedule_text += f"üìÖ *{weekday_str}*: {hours}\n"

    text = f"""‚úÇÔ∏è *–í—ñ—Ç–∞—é! –Ø ‚Äî {BARBER_NAME}, –º–∞–π—Å—Ç–µ—Ä-–±–∞—Ä–±–µ—Ä, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–ª—ñ—î–Ω—Ç–∞–º –≤–∏–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∏–ª—å–Ω–æ —Ç–∞ –¥–æ–≥–ª—è–Ω—É—Ç–æ.* üíà

üìå *–ü–æ—Å–ª—É–≥–∏:*
    ‚Ä¢ üíá‚Äç‚ôÇÔ∏è *–ß–æ–ª–æ–≤—ñ—á—ñ —Å—Ç—Ä–∏–∂–∫–∏* ‚Äî –∫–ª–∞—Å–∏–∫–∞ —ñ —Å—É—á–∞—Å–Ω—ñ—Å—Ç—å
    ‚Ä¢ üßî *–î–æ–≥–ª—è–¥ –∑–∞ –±–æ—Ä–æ–¥–æ—é* ‚Äî –æ–±—Ä—ñ–∑–∫–∞ —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è
    ‚Ä¢ ü™í *–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–µ –≥–æ–ª—ñ–Ω–Ω—è* ‚Äî –≥–ª–∞–¥–∫–æ —Ç–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ
    ‚Ä¢ üåü *–°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è* ‚Äî –≤–∏–±—ñ—Ä –æ–±—Ä–∞–∑—É, —â–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –≤–∞–º
    ‚Ä¢ üë∂ *–î–∏—Ç—è—á—ñ —Å—Ç—Ä–∏–∂–∫–∏* ‚Äî –∑ —Ç—É—Ä–±–æ—Ç–æ—é –ø—Ä–æ –∫–æ–º—Ñ–æ—Ä—Ç –¥–∏—Ç–∏–Ω–∏

üíé *–ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –º–µ–Ω–µ:*
    ‚Ä¢ üë§ *–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥* –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    ‚Ä¢ ‚úÖ *–í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å* —ñ —É–≤–∞–≥–∞ –¥–æ –¥–µ—Ç–∞–ª–µ–π
    ‚Ä¢ ‚ú® *–°—Ç–∏–ª—å*, —â–æ –ø—ñ–¥–∫—Ä–µ—Å–ª—é—î –≤–∞—à—É —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å

üìç *–ù–∞—à—ñ –¥–∞–Ω—ñ:*
    üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {PHONE_NUMBER}
    ‚è∞ *–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:*
{week_schedule_text}
    üì≤ *Telegram:* [@shvetsnazar_barber](https://t.me/shvetsnazar_barber)

–ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –±–∞—á–∏—Ç–∏ –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤! –î–æ–∑–≤–æ–ª—å—Ç–µ –º–µ–Ω—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –≤–∏–≥–ª—è–¥–∞—Ç–∏ –Ω–∞ –≤—Å—ñ 100%! üåü
"""

    text = escape_markdown(text, version=2)

    keyboard = [
        [
            InlineKeyboardButton("Instagram", url="https://www.instagram.com/shvetsnazar_barber/"),
            InlineKeyboardButton("WhatsApp", url="https://www.instagram.com/shvetsnazar_barber/c")
        ],
        [InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_main_menu_text")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="MarkdownV2")
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="MarkdownV2"
        )

async def cosmetics(update: Update, context: CallbackContext) -> None:
    photo_url = "https://i.ibb.co/7W1nTm1/361fdbc957e0.jpg"
    caption = (
        "Uppercut Deluxe Matte Pomade (100g) ‚Äî —Ü–µ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∑–∞—Å—ñ–± –¥–ª—è —É–∫–ª–∞–¥–∫–∏ –≤–æ–ª–æ—Å—Å—è, "
        "—è–∫–∏–π –Ω–∞–¥–∞—î –º–∞—Ç–æ–≤–∏–π –µ—Ñ–µ–∫—Ç —ñ —Å–µ—Ä–µ–¥–Ω—é —Ñ—ñ–∫—Å–∞—Ü—ñ—é. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –≤–æ–ª–æ—Å—Å—è "
        "—Ç–∞ –ª–µ–≥–∫–æ –∑–º–∏–≤–∞—î—Ç—å—Å—è –≤–æ–¥–æ—é."
    )

    caption = escape_markdown(caption, version=2)

    keyboard = [
        [InlineKeyboardButton("–ó–ê–ú–û–í–ò–¢–ò", callback_data="order_cosmetics")],
        [InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_main_menu_text")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_photo(
            photo=photo_url,
            caption=caption,
            reply_markup=reply_markup,
            parse_mode="MarkdownV2"
        )
    else:
        query = update.callback_query
        await query.answer()
        await query.message.delete()
        await update.effective_chat.send_photo(
            photo=photo_url,
            caption=caption,
            reply_markup=reply_markup,
            parse_mode="MarkdownV2"
        )
@blacklist_protected
async def book_service(update: Update, context: CallbackContext) -> None:
    query = None
    if update.callback_query:
        query = update.callback_query
        await query.answer()

    active_services = [
        (doc_id, data)
        for doc_id, data in services_cache.items()
        if data.get("active")
    ]
    if not active_services:
        text = "üíà –ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–æ—Å–ª—É–≥. ‚úÇÔ∏è –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!"
        back_button = [[InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_main_menu_text")]]
        reply_markup = InlineKeyboardMarkup(back_button)
        if query:
            await safe_edit_message_text(query, text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
        return

    keyboard = []
    for doc_id, data in active_services:
        name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        price = data.get("price", "0 —î–≤—Ä–æ")
        btn_text = f"{name} - {price}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"book_service_{doc_id}")])

    keyboard.append([InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_main_menu_text")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:"
    if query:
        await safe_edit_message_text(query, text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

# ========= –í–ò–ë–Ü–† –î–ê–¢–ò (–¥–ª—è –∑–∞–ø–∏—Å—É) =========
async def select_date(update: Update, context: CallbackContext) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏ –∑–∞–ø–∏—Å—É (—á–µ—Ä–µ–∑ callback_data –≤ button_handler)."""
    query = update.callback_query
    await query.answer()

    data = query.data
    offset = 0

    if data.startswith("more_dates_"):
        parts = data.split("_")
        if len(parts) == 3:
            offset = int(parts[2])
        offset += 14

    elif data.startswith("previous_dates_"):
        parts = data.split("_")
        if len(parts) == 3:
            old_offset = int(parts[2])
            offset = max(0, old_offset - 14)

    today = datetime.now().date() + timedelta(days=offset)
    dates = []

    for i in range(14):
        current_date = today + timedelta(days=i)
        if current_date.weekday() == 6:  # –Ø–∫—â–æ —Ü–µ –Ω–µ–¥—ñ–ª—è
            custom_data = get_custom_schedule_for_date(current_date.strftime("%d.%m.%Y"))
            # –Ø–∫—â–æ —î –¥–∞–Ω—ñ —Ç–∞ –≤–∫–∞–∑–∞–Ω–æ, —â–æ –≤–∏—Ö—ñ–¥–Ω–∏–π, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–¥—ñ–ª—é.
            if custom_data is not None and custom_data.get("off"):
                continue
        dates.append(current_date.strftime("%d.%m.%Y"))

    if not dates:
        keyboard = [[InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_services")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message_text(query, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–∞—Ç.", reply_markup=reply_markup)
        return

    keyboard = []
    for i in range(0, len(dates), 2):
        row = [InlineKeyboardButton(dates[i], callback_data=f"date_{dates[i]}")]
        if i + 1 < len(dates):
            row.append(InlineKeyboardButton(dates[i + 1], callback_data=f"date_{dates[i + 1]}"))
        keyboard.append(row)

    nav_row = []
    if offset > 0:
        nav_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"previous_dates_{offset}"))
    else:
        nav_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_services"))
    
    nav_row.append(InlineKeyboardButton("–©–µ –î–∞—Ç–∞", callback_data=f"more_dates_{offset}"))
    keyboard.append(nav_row)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(query, "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞–ø–∏—Å—É:", reply_markup=reply_markup)
    
def round_up_to_next_slot(dt: datetime) -> datetime:
    dt = dt.replace(second=0, microsecond=0)
    remainder = dt.minute % 30
    if remainder != 0:
        dt += timedelta(minutes=(30 - remainder))
    return dt

async def select_time(update: Update, context: CallbackContext, selected_date_str: str = None) -> None:
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É —á–∞—Å—É –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if not selected_date_str:
        # data: "date_–î–î.–ú–ú.–†–†–†–†"
        selected_date_str = query.data.split("_", 1)[1]

    if user_id not in user_selection or "service_id" not in user_selection[user_id]:
        logging.error(f"üö® –ü–û–ú–ò–õ–ö–ê! –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –Ω–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–æ—ó –ø–æ—Å–ª—É–≥–∏! user_selection: {user_selection}")
        await safe_edit_message_text(query, "‚ö†Ô∏è –ü–æ—Å–ª—É–≥–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    service_id = user_selection[user_id]["service_id"]
    service_data = services_cache.get(service_id, {})
    service_name = service_data.get("name", "–ü–æ—Å–ª—É–≥–∞")
    service_duration = service_data.get("duration", 30)

    user_selection[user_id]["date"] = selected_date_str
    date_obj = datetime.strptime(selected_date_str, "%d.%m.%Y").date()
    service_working_hours = get_working_hours(date_obj, service_name)

    if not service_working_hours:
        keyboard = [[InlineKeyboardButton("–û–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –¥–∞—Ç—É üìÖ", callback_data="select_date")]]
        await safe_edit_message_text(
            query,
            "‚õî –ù–∞ —Ü—é –¥–∞—Ç—É –≤–∏—Ö—ñ–¥–Ω–∏–π. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    times = []
    booked_for_date = booked_slots.get(selected_date_str, [])
    slots_needed = service_duration // 30

    # –Ø–∫—â–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±—É—Ñ–µ—Ä 2 –≥–æ–¥–∏–Ω–∏ —ñ –æ–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ 30-—Ö–≤–∏–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç—É
    now = datetime.now()
    is_today = (date_obj == now.date())
    if is_today:
        min_booking_dt = round_up_to_next_slot(now + timedelta(hours=2))
    else:
        min_booking_dt = None

    for interval in service_working_hours:
        interval_start = safe_strptime(interval[0], "%H:%M")
        interval_end = safe_strptime(interval[1], "%H:%M")
        if not interval_start or not interval_end:
            continue

        # –°—Ç–≤–æ—Ä—é—î–º–æ datetime –¥–ª—è –¥–∞–Ω–æ—ó –¥–∞—Ç–∏
        interval_start_dt = datetime.combine(date_obj, interval_start.time())
        interval_end_dt = datetime.combine(date_obj, interval_end.time())

        if is_today:
            current_interval_start = max(interval_start_dt, min_booking_dt)
        else:
            current_interval_start = interval_start_dt

        adjusted_end = interval_end_dt - timedelta(minutes=(slots_needed - 1) * 30)
        current_time = current_interval_start
        while current_time <= adjusted_end:
            time_str = current_time.strftime("%H:%M")
            slot_times = [
                (current_time + timedelta(minutes=30 * i)).strftime("%H:%M")
                for i in range(slots_needed)
            ]
            if all(t not in booked_for_date for t in slot_times):
                times.append(time_str)
            current_time += timedelta(minutes=30)

    if not times:
        await safe_edit_message_text(query, "‚õî –ù–∞ —Ü—é –¥–∞—Ç—É –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É!")
        return

    times.sort()
    keyboard = []
    for i in range(0, len(times), 2):
        row = [InlineKeyboardButton(times[i], callback_data=f"time_{selected_date_str}_{times[i]}")]
        if i + 1 < len(times):
            row.append(InlineKeyboardButton(times[i+1], callback_data=f"time_{selected_date_str}_{times[i+1]}"))
        keyboard.append(row)

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="select_date")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await safe_edit_message_text(query, text="üïí –û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=reply_markup)

# ========= –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –í–ò–ë–û–†–£ (–¥–ª—è –∑–∞–ø–∏—Å—É) =========
async def confirm_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    _, selected_date, selected_time = query.data.split("_", 2)

    service_id = user_selection[user_id].get("service_id", None)
    date = user_selection[user_id].get("date", None)
    if not service_id or not date:
        await query.answer()
        await safe_edit_message_text(query, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    service_data = services_cache.get(service_id, {})
    service_name = service_data.get("name", "–ü–æ—Å–ª—É–≥–∞")
    price = service_data.get("price", "0 —î–≤—Ä–æ")
    duration = service_data.get("duration", 30)

    user_selection[user_id]["time"] = selected_time

    message = (
        f"–í–∏ –≤–∏–±—Ä–∞–ª–∏:\n"
        f"------------------------------------\n"
        f"–ü–æ—Å–ª—É–≥–∞: {service_name}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–ß–∞—Å: {selected_time}\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {price}\n"
        f"------------------------------------\n"
        f"–Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü–Ü–î–¢–í–ï–†–î–ò–¢–ò¬ª"
    )

    keyboard = [
        [
            InlineKeyboardButton("–ü–Ü–î–¢–í–ï–†–î–ò–¢–ò", callback_data="proceed"),
            InlineKeyboardButton("–í–Ü–î–ú–Ü–ù–ò–¢–ò", callback_data="cancel"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.answer()
    await safe_edit_message_text(query, text=message, reply_markup=reply_markup)


async def show_count_periods(update: Update, context: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton("14 –¥–Ω—ñ–≤", callback_data="stat_count_14"),
            InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å", callback_data="stat_count_30")
        ],
        [
            InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ", callback_data="stat_count_90"),
            InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤", callback_data="stat_count_180")
        ],
        [
            InlineKeyboardButton("9 –º—ñ—Å—è—Ü—ñ", callback_data="stat_count_270"),
            InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ", callback_data="stat_count_365")
        ],
        [
            InlineKeyboardButton("Custom", callback_data="stat_count_custom"),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="stat_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤*:", reply_markup=reply_markup, parse_mode="MarkdownV2")
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤*:", reply_markup=reply_markup, parse_mode="MarkdownV2")
        
async def show_avg_periods(update: Update, context: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton("14 –¥–Ω—ñ–≤", callback_data="stat_avg_14"),
            InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å", callback_data="stat_avg_30")
        ],
        [
            InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ", callback_data="stat_avg_90"),
            InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ", callback_data="stat_avg_180")
        ],
        [
            InlineKeyboardButton("9 –º—ñ—Å—è—Ü—ñ", callback_data="stat_avg_270"),
            InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ", callback_data="stat_avg_365")
        ],
        [
            InlineKeyboardButton("Custom", callback_data="stat_avg_custom"),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="stat_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫*:", reply_markup=reply_markup, parse_mode="MarkdownV2")
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫*:", reply_markup=reply_markup, parse_mode="MarkdownV2")



async def send_user_orders(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    orders_ref = (
        db.collection("orders")
        .where("user_id", "==", user_id)
        .where("status", "==", "confirmed")
    )

    orders = [doc.to_dict() for doc in orders_ref.stream()]
    if not orders:
        await safe_edit_message_text(
            query,
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_history_menu")]]
            ),
        )
        return

    message = "–¶–µ –≤—Å—ñ –≤–∞—à—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    for data in orders:
        product = data.get("product", "–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π")
        price = data.get("price", "–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞")
        order_info = (
            f"\n------------------------------------\n"
            f"–¢–æ–≤–∞—Ä: {product}\n"
            f"–¶—ñ–Ω–∞: {price}\n"
        )
        if len(message) + len(order_info) > 3500:
            await safe_edit_message_text(
                query,
                message,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_history_menu")]]
                ),
            )
            message = order_info
            await context.bot.send_message(chat_id=user_id, text=message)
        else:
            message += order_info

    keyboard = [[InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_history_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(query, message, reply_markup=reply_markup)

# ========= –ê–î–ú–Ü–ù –Ü–°–¢–û–†–Ü–Ø =========

async def show_clients(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.")
        return

    users_collection = db.collection("users").stream()
    users_data = list(users_collection)
    if not users_data:
        await update.message.reply_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    message = "–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤:\n"
    for doc in users_data:
        user_info = doc.to_dict()
        username = user_info.get("username", f"UserID_{user_info.get('user_id')}")
        full_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
        display_name = f"{username} ({full_name})" if full_name else username

        message += f"- {display_name}\n"
        if len(message) > 3500:
            await update.message.reply_text(message)
            message = ""

    if message:
        await update.message.reply_text(message)


# ========= 3. –†–û–ó–ö–õ–ê–î (üìÜ –†–æ–∑–∫–ª–∞–¥) =========
async def show_schedule_menu(update: Update, context: CallbackContext):
    query = None
    if update.callback_query:
        query = update.callback_query
        if update.effective_user.id not in ADMIN_USER_IDS:
            await query.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.", show_alert=True)
            return
        await query.answer()
    else:
        if update.effective_user.id not in ADMIN_USER_IDS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.")
            return

    keyboard = [
        [InlineKeyboardButton("üìÖ –û–¥–Ω–∞–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫", callback_data="schedule_same_for_week")],
        [InlineKeyboardButton("üìÜ –ì—Ä–∞—Ñ—ñ–∫ –ø–æ –¥–Ω—è—Ö", callback_data="schedule_daily")],
        [InlineKeyboardButton("üõë –í–∏—Ö—ñ–¥–Ω—ñ", callback_data="schedule_days_off")],
        [InlineKeyboardButton("üïí –î–∞—Ç–∞ –π —á–∞—Å", callback_data="schedule_edit_date_range")],
        [InlineKeyboardButton("üëÄ –†–æ–∑–∫–ª–∞–¥", callback_data="schedule_view")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É:"
    if query:
        await safe_edit_message_text(query, text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

def validate_time_range(time_range_str):
    pattern = r"^\d{2}:\d{2}-\d{2}:\d{2}$"
    if re.match(pattern, time_range_str):
        start, end = time_range_str.split("-")
        try:
            datetime.strptime(start, "%H:%M")
            datetime.strptime(end, "%H:%M")
            return True
        except ValueError:
            return False
    return False

def validate_date_range_input(text: str):
    """
    –ü—Ä–∏–∫–ª–∞–¥: "12.07.2025-15.07.2025 10:00-20:00" –∞–±–æ "12.07.2025-15.07.2025 –≤–∏—Ö—ñ–¥–Ω–∏–π".
    """
    parts = text.split(" ")
    if len(parts) not in [1, 2]:
        return None

    date_range_part = parts[0]
    if "-" not in date_range_part:
        return None

    start_date_str, end_date_str = date_range_part.split("-")
    try:
        start_date = datetime.strptime(start_date_str.strip(), "%d.%m.%Y").date()
        end_date = datetime.strptime(end_date_str.strip(), "%d.%m.%Y").date()
    except ValueError:
        return None

    if start_date > end_date:
        return None

    if len(parts) == 1:
        return None  # –Ω–µ–º–∞—î —ñ–Ω—Ñ–∏ –ø—Ä–æ —á–∞—Å —á–∏ "–≤–∏—Ö—ñ–¥–Ω–∏–π"

    time_part = parts[1].lower().strip()
    if time_part == "–≤–∏—Ö—ñ–¥–Ω–∏–π":
        return (start_date, end_date, True, None, None)
    else:
        if validate_time_range(time_part):
            s, e = time_part.split("-")
            return (start_date, end_date, False, s, e)
        else:
            return None

async def schedule_set_same_for_week(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    ADMIN_STATE[query.from_user.id] = "WAITING_FOR_SAME_SCHEDULE"
    text = (
        "–í–∫–∞–∂—ñ—Ç—å —á–∞—Å —Ä–æ–±–æ—Ç–∏ –¥–ª—è –í–°–¨–û–ì–û —Ç–∏–∂–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ 09:00-18:00\n"
        "–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '–≤–∏—Ö—ñ–¥–Ω–∏–π', —è–∫—â–æ –≤—Å—ñ –¥–Ω—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–º–∏."
    )
    await safe_edit_message_text(query, text)

async def schedule_set_daily(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    ADMIN_STATE[query.from_user.id] = "DAILY_SCHEDULE_SETUP"

    buttons = []
    for i in range(7):
        current_info = DEFAULT_WEEK_SCHEDULE[i]
        status = "‚úÖ" if not current_info["off"] else "‚ùå"
        label = f"{status} {get_weekday_name_ua(i)} ({current_info['start']}-{current_info['end']})"
        buttons.append([InlineKeyboardButton(label, callback_data=f"daily_schedule_day_{i}")])

    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_schedule_main")])
    reply_markup = InlineKeyboardMarkup(buttons)

    await safe_edit_message_text(query, "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:", reply_markup=reply_markup)

async def schedule_set_days_off(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    ADMIN_STATE[query.from_user.id] = "DAYS_OFF_SETUP"
    await show_days_off_menu(query, context)

def build_days_off_keyboard():
    buttons = []
    for i in range(7):
        off = DEFAULT_WEEK_SCHEDULE[i]["off"]
        day_str = get_weekday_name_ua(i)
        prefix = "‚úÖ" if off else "‚ùå"
        btn_label = f"{prefix} {day_str}"
        buttons.append([InlineKeyboardButton(btn_label, callback_data=f"toggle_day_off_{i}")])
    buttons.append([InlineKeyboardButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏", callback_data="finish_set_days_off")])
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_schedule_main")])
    return InlineKeyboardMarkup(buttons)

async def show_days_off_menu(query, context):
    text = "–û–±–µ—Ä—ñ—Ç—å –¥–Ω—ñ, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∏—Ö—ñ–¥–Ω–∏–º–∏ (–¥–µ—Ñ–æ–ª—Ç). –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å."
    reply_markup = build_days_off_keyboard()
    await safe_edit_message_text(query, text, reply_markup=reply_markup)

async def schedule_edit_date_range(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    ADMIN_STATE[query.from_user.id] = "EDIT_DATE_RANGE"
    await safe_edit_message_text(
        query,
        "–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY-DD.MM.YYYY 09:00-18:00\n"
        "–∞–±–æ DD.MM.YYYY-DD.MM.YYYY –≤–∏—Ö—ñ–¥–Ω–∏–π.\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥: 12.07.2025-15.07.2025 10:00-20:00"
    )

async def schedule_view(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    today = datetime.now().date()
    text = "üìÖ *–ü–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ (–Ω–∞–π–±–ª–∏–∂—á—ñ 10 –¥–Ω—ñ–≤):*\n\n"

    keyboard = []
    for i in range(10):
        d = today + timedelta(days=i)
        date_str = d.strftime("%d.%m.%Y")
        weekday_str = get_weekday_name_ua(d.weekday())

        custom_data = get_custom_schedule_for_date(date_str)
        if custom_data:
            if custom_data["off"]:
                hours = "‚ùå –í–∏—Ö—ñ–¥–Ω–∏–π"
            else:
                hours = f"{custom_data['start']} - {custom_data['end']}"
        else:
            default_info = DEFAULT_WEEK_SCHEDULE[d.weekday()]
            if default_info["off"]:
                hours = "‚ùå –í–∏—Ö—ñ–¥–Ω–∏–π"
            else:
                hours = f"{default_info['start']} - {default_info['end']}"

        button_text = f"üìÖ {date_str} | {weekday_str}: {hours}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_schedule_{date_str}")])

    keyboard.append([InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_admin_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await safe_edit_message_text(query, text, reply_markup=reply_markup)

# ========= –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ü–û–°–õ–£–ì =========
async def show_services_settings_menu(update: Update, context: CallbackContext):
    if update.message:
        if update.effective_user.id not in ADMIN_USER_IDS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.")
            return
        text = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥:"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏/—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É", callback_data="service_add_edit_main")],
            [InlineKeyboardButton("üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏", callback_data="service_change_price")],
            [InlineKeyboardButton("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥", callback_data="service_toggle_active")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        query = update.callback_query
        await query.answer()
        text = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥:"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏/—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—Å–ª—É–≥—É", callback_data="service_add_edit_main")],
            [InlineKeyboardButton("üí∞ –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏", callback_data="service_change_price")],
            [InlineKeyboardButton("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥", callback_data="service_toggle_active")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message_text(query, text, reply_markup=reply_markup)

async def service_add_edit_main(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    services_list = list(services_cache.items())  # (doc_id, data)
    services_list.sort(key=lambda x: x[1].get("name", ""))

    keyboard = []
    for doc_id, data in services_list:
        service_name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        keyboard.append(
            [InlineKeyboardButton(service_name, callback_data=f"service_edit_select_{doc_id}")]
        )

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–æ—Å–ª—É–≥—É", callback_data="service_add_new")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_services_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É:"
    await safe_edit_message_text(query, text, reply_markup=reply_markup)

async def service_add_new(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    ADMIN_STATE[query.from_user.id] = "SERVICE_ADD_NEW_NAME"
    await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –ø–æ—Å–ª—É–≥–∏:")

async def service_edit_select(update: Update, context: CallbackContext, doc_id: str):
    query = update.callback_query
    await query.answer()
    context.user_data["edit_service_id"] = doc_id
    ADMIN_STATE[query.from_user.id] = "SERVICE_EDIT_NAME"
    service_data = services_cache.get(doc_id, {})
    current_name = service_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
    current_price = service_data.get("price", "0 —î–≤—Ä–æ")
    current_duration = service_data.get("duration", 30)
    text = (
        f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞: {current_name}\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price}\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {current_duration} —Ö–≤\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å **–Ω–æ–≤—É –Ω–∞–∑–≤—É** –ø–æ—Å–ª—É–≥–∏ (–∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"
    )
    await safe_edit_message_text(query, text, parse_mode="Markdown")

async def service_change_price_main(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    services_list = list(services_cache.items())
    services_list.sort(key=lambda x: x[1].get("name", ""))

    keyboard = []
    for doc_id, data in services_list:
        service_name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        current_price = data.get("price", "0 —î–≤—Ä–æ")
        btn_text = f"{service_name} ‚Äì {current_price}"
        keyboard.append(
            [InlineKeyboardButton(btn_text, callback_data=f"service_price_select_{doc_id}")]
        )

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_services_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(query, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏:", reply_markup=reply_markup)

async def service_toggle_active_main(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    services_list = list(services_cache.items())
    services_list.sort(key=lambda x: x[1].get("name", ""))

    keyboard = []
    for doc_id, data in services_list:
        name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        active = data.get("active", False)
        btn_text = f"{'‚úÖ' if active else '‚ùå'} {name}"
        keyboard.append(
            [InlineKeyboardButton(btn_text, callback_data=f"service_toggle_active_{doc_id}")]
        )

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_services_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:"
    await safe_edit_message_text(query, text, reply_markup=reply_markup)

def create_service_in_db(name: str, price: str, duration: int):
    doc_ref = db.collection("services").document()
    doc_id = doc_ref.id
    doc_ref.set({
        "name": name,
        "price": price,
        "duration": duration,
        "active": True
    })
    refresh_services_cache()
    return doc_id

def update_service_in_db(doc_id: str, new_data: dict):
    doc_ref = db.collection("services").document(doc_id)
    doc_ref.update(new_data)
    refresh_services_cache()


# ========= –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø (JOB QUEUE) =========
async def send_reminders(context: CallbackContext):
    now = datetime.now()
    bookings_ref = db.collection("bookings").where("status", "==", "confirmed")
    bookings = bookings_ref.stream()

    for booking in bookings:
        data = booking.to_dict()
        user_id_ = data.get("user_id")
        date_str = data.get("date")
        time_str = data.get("time")
        service = data.get("service", "–ü–æ—Å–ª—É–≥–∞")
        price = data.get("price", "–¶—ñ–Ω–∞")

        appointment_datetime = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
        time_until_appointment = appointment_datetime - now

        # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (24 –≥–æ–¥ —ñ 2 –≥–æ–¥)
        if 23.5 * 3600 <= time_until_appointment.total_seconds() <= 24.5 * 3600:
            message = (
                f"‚è∞–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –í–∞—à –∑–∞–ø–∏—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n"
                f"------------------------------------\n"
                f"–ü–æ—Å–ª—É–≥–∞: {service}\n"
                f"–î–∞—Ç–∞: {date_str}\n"
                f"–ß–∞—Å: {time_str}\n"
                f"–¶—ñ–Ω–∞: {price}\n"
            )
            try:
                await context.bot.send_message(chat_id=user_id_, text=message)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (24 –≥–æ–¥–∏–Ω–∏) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id_}: {e}")

        elif 1.5 * 3600 <= time_until_appointment.total_seconds() <= 2.5 * 3600:
            message = (
                f"‚è∞–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –í–∞—à –∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏!\n"
                f"------------------------------------\n"
                f"–ü–æ—Å–ª—É–≥–∞: {service}\n"
                f"–î–∞—Ç–∞: {date_str}\n"
                f"–ß–∞—Å: {time_str}\n"
                f"–¶—ñ–Ω–∞: {price}\n"
            )
            try:
                await context.bot.send_message(chat_id=user_id_, text=message)
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (2 –≥–æ–¥–∏–Ω–∏) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id_}: {e}")

        # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º (5 –≥–æ–¥ —ñ 2 –≥–æ–¥)
        for admin_id in ADMIN_USER_IDS:
            if 4.5 * 3600 <= time_until_appointment.total_seconds() <= 5.5 * 3600:
                admin_msg = (
                    f"‚è∞–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ó–∞–ø–∏—Å —á–µ—Ä–µ–∑ 5 –≥–æ–¥–∏–Ω!\n"
                    f"------------------------------------\n"
                    f"–ü–æ—Å–ª—É–≥–∞: {service}\n"
                    f"–î–∞—Ç–∞: {date_str}\n"
                    f"–ß–∞—Å: {time_str}\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {data.get('username', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')}\n"
                )
                try:
                    await context.bot.send_message(chat_id=admin_id, text=admin_msg)
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (5 –≥–æ–¥–∏–Ω) –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

            elif 1.5 * 3600 <= time_until_appointment.total_seconds() <= 2.5 * 3600:
                admin_msg = (
                    f"‚è∞–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ó–∞–ø–∏—Å —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏!\n"
                    f"------------------------------------\n"
                    f"–ü–æ—Å–ª—É–≥–∞: {service}\n"
                    f"–î–∞—Ç–∞: {date_str}\n"
                    f"–ß–∞—Å: {time_str}\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {data.get('username', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')}\n"
                )
                try:
                    await context.bot.send_message(chat_id=admin_id, text=admin_msg)
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (2 –≥–æ–¥–∏–Ω–∏) –∞–¥–º—ñ–Ω—É {admin_id}: {e}")


# ========= –ú–ï–ù–Æ ¬´‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è¬ª (—Ä–æ–∑—Å–∏–ª–∫–∞) =========
async def show_messages(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.")
        return

    keyboard = [
        [
            InlineKeyboardButton(
                "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º (—Ä–æ–∑—Å–∏–ª–∫–∞)",
                callback_data="broadcast_message"
            )
        ],
        [InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ú–µ–Ω—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:", reply_markup=reply_markup)

async def bot_settings(update: Update, context: CallbackContext):
    if update.effective_user.id not in ADMIN_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.")
        return

    keyboard = [[InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_admin_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞:", reply_markup=reply_markup)

async def broadcast_message_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id in ADMIN_USER_IDS:
        admin_broadcast_mode[user_id] = True
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–±–æ /cancel –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏."
        )
    else:
        await safe_edit_message_text(query, "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ.")

# ========== –ù–û–í–ò–ô –§–£–ù–ö–¶–Ü–û–ù–ê–õ: –ü–Ü–î–ú–ï–ù–Æ "–ó–∞–ø–∏—Å–∏" –î–õ–Ø –ê–î–ú–Ü–ù–ê =========
async def admin_bookings_menu(update: Update, context: CallbackContext):
    query = None
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    if update.message:
        if update.effective_user.id not in ADMIN_USER_IDS:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É.")
            return
        keyboard = [
            [InlineKeyboardButton("üóìÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–ø–∏—Å–∏", callback_data="admin_today_bookings")],
            [InlineKeyboardButton("üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É", callback_data="admin_pick_date_for_bookings")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É", callback_data="admin_cancel_booking_main")],
            [InlineKeyboardButton("üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Å—ñ–≤", callback_data="admin_records_menu")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ú–µ–Ω—é ¬´–ó–∞–ø–∏—Å–∏¬ª:", reply_markup=reply_markup)
    else:
        keyboard = [
            [InlineKeyboardButton("üóìÔ∏è –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–ø–∏—Å–∏", callback_data="admin_today_bookings")],
            [InlineKeyboardButton("üìÜ –ó–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É", callback_data="admin_pick_date_for_bookings")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É", callback_data="admin_cancel_booking_main")],
            [InlineKeyboardButton("üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Å—ñ–≤", callback_data="admin_records_menu")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message_text(query, "–ú–µ–Ω—é ¬´–ó–∞–ø–∏—Å–∏¬ª:", reply_markup=reply_markup)

async def admin_today_bookings(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    today_str = datetime.now().strftime("%d.%m.%Y")
    bookings_ref = db.collection("bookings").where("date","==", today_str).stream()
    bookings_list = []
    for doc in bookings_ref:
        data = doc.to_dict()
        status = data.get("status")
        if status in ["pending","confirmed"]:
            bookings_list.append((doc.id, data))

    if not bookings_list:
        await safe_edit_message_text(
            query,
            "–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö/–≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–ø–∏—Å—ñ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")]
            ])
        )
        return

    # (// CHANGE) –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —É context –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    context.user_data["current_records"] = bookings_list
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—à—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
    await display_records_list(
        update,
        context,
        bookings_list,
        "admin_bookings_main",
        page=0,
        page_size=10
    )



    keyboard = []
    text_header = "üìÖ *–°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∑–∞–ø–∏—Å–∏*:\n"
    for booking_id, data in bookings_list:
        username = data.get("username", "–ù–µ–≤—ñ–¥–æ–º–æ")
        time_ = data.get("time", "--:--")
        service_ = data.get("service", "–ü–æ—Å–ª—É–≥–∞")
        btn_text = f"{username} - {time_} - {service_}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"admin_booking_details_{booking_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(query, text_header, reply_markup=reply_markup, parse_mode="Markdown")

async def admin_pick_date_for_bookings(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    ADMIN_STATE[query.from_user.id] = "ADMIN_WAITING_DATE_FOR_BOOKINGS"
    await safe_edit_message_text(
        query,
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å–∏:"
    )

async def admin_show_bookings_for_date(date_str: str, update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    query = None
    if update.callback_query:
        query = update.callback_query

    bookings_ref = db.collection("bookings").where("date", "==", date_str).stream()
    bookings_list = [...]  # –í—ñ–¥—ñ–±—Ä–∞–Ω—ñ –∑–∞ –¥–∞—Ç–æ—é
    await display_records_list(update, context, bookings_list, return_callback="admin_bookings_main", page=0, page_size=10)
    now = datetime.now()

    for doc in bookings_ref:
        data = doc.to_dict()
        status = data.get("status")
        if status not in ["pending", "confirmed"]:
            continue
        dt_str = f"{data.get('date')} {data.get('time')}"
        try:
            dt_obj = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")
            if dt_obj >= now:
                bookings_list.append((doc.id, data))
        except:
            pass

    if not bookings_list:
        text = f"–ù–∞ {date_str} –Ω–µ–º–∞—î (pending/confirmed) –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤."
        if query:
            await safe_edit_message_text(
                query,
                text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")]
                ])
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")]
                ])
            )
        return

    keyboard = []
    text_header = f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ {date_str}:\n"
    for booking_id, data in bookings_list:
        username = data.get("username", "–ù–µ–≤—ñ–¥–æ–º–æ")
        time_ = data.get("time", "--:--")
        service_ = data.get("service", "–ü–æ—Å–ª—É–≥–∞")
        btn_text = f"{username} - {time_} - {service_}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"admin_booking_details_{booking_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query:
        await safe_edit_message_text(query, text_header, reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=user_id, text=text_header, reply_markup=reply_markup)

async def admin_booking_details(update: Update, context: CallbackContext, booking_id: str):
    query = update.callback_query
    await query.answer()

    doc_ref = db.collection("bookings").document(booking_id)
    doc = doc_ref.get()
    if not doc.exists:
        await safe_edit_message_text(query, "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return

    data = doc.to_dict()
    user_name = data.get("username", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
    service_ = data.get("service", "–ü–æ—Å–ª—É–≥–∞")
    date_ = data.get("date", "--.--.----")
    time_ = data.get("time", "--:--")
    price_ = data.get("price", "N/A")
    status_ = data.get("status", "pending/confirmed?")

    detail_text = (
        f"üë§ *–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:* {user_name}\n"
        f"üíá *–ü–æ—Å–ª—É–≥–∞:* {service_}\n"
        f"üìÖ *–î–∞—Ç–∞:* {date_}\n"
        f"‚è∞ *–ß–∞—Å:* {time_}\n"
        f"üíµ *–¶—ñ–Ω–∞:* {price_}\n"
        f"üìå *–°—Ç–∞—Ç—É—Å:* {status_}"
    )

    keyboard = [
        [InlineKeyboardButton("üì© –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data=f"admin_notify_booking_{booking_id}")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data=f"admin_cancel_booking_{booking_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"admin_show_bookings_for_date_{date_}")]

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(query, detail_text, reply_markup=reply_markup, parse_mode="Markdown")

async def admin_notify_booking(update: Update, context: CallbackContext, booking_id: str):
    query = update.callback_query
    await query.answer()
    ADMIN_STATE[query.from_user.id] = f"ADMIN_SEND_NOTIFICATION_{booking_id}"
    await safe_edit_message_text(
        query,
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ /cancel —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏:"
    )

async def process_admin_send_notification(user_id: int, text: str, context: CallbackContext):
    state = ADMIN_STATE.get(user_id, "")
    if not state.startswith("ADMIN_SEND_NOTIFICATION_"):
        return

    booking_id = state.split("_")[-1]
    booking_ref = db.collection("bookings").document(booking_id)
    doc = booking_ref.get()
    if not doc.exists:
        return

    booking_data = doc.to_dict()
    client_id = booking_data.get("user_id")
    if not client_id:
        return

    try:
        await context.bot.send_message(chat_id=client_id, text=f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{text}")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {client_id}: {e}")

    ADMIN_STATE[user_id] = None

async def admin_cancel_booking(update: Update, context: CallbackContext, booking_id: str):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"admin_confirm_cancel_{booking_id}"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data="admin_bookings_main")
        ]
    ]
    text = "–ß–∏ –¥—ñ–π—Å–Ω–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?"
    await safe_edit_message_text(query, text, reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_confirm_cancel(update: Update, context: CallbackContext, booking_id: str):
    query = update.callback_query
    await query.answer()
    ADMIN_STATE[query.from_user.id] = f"ADMIN_CANCEL_BOOKING_REASON_{booking_id}"
    await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è (–∞–±–æ /cancel –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏):")

async def process_admin_cancel_reason(user_id: int, reason_text: str, context: CallbackContext):
    state = ADMIN_STATE.get(user_id, "")
    if not state.startswith("ADMIN_CANCEL_BOOKING_REASON_"):
        return

    booking_id = state.split("_")[-1]
    booking_ref = db.collection("bookings").document(booking_id)
    doc = booking_ref.get()
    if not doc.exists:
        return

    booking_data = doc.to_dict()
    date_ = booking_data.get("date")
    time_ = booking_data.get("time")
    duration_ = booking_data.get("duration", 30)
    booked_for_date = booked_slots.get(date_, [])

    # –ó–≤—ñ–ª—å–Ω—è—î–º–æ —Å–ª–æ—Ç–∏
    start_time = datetime.strptime(time_, "%H:%M")
    slots_needed = duration_ // 30
    for i in range(slots_needed):
        t_str = (start_time + timedelta(minutes=30*i)).strftime("%H:%M")
        if t_str in booked_for_date:
            booked_for_date.remove(t_str)
    booked_slots[date_] = booked_for_date

    booking_ref.update({"status": "canceled"})

    client_id = booking_data.get("user_id")
    service_ = booking_data.get("service", "–ü–æ—Å–ª—É–≥–∞")
    msg = (
        f"‚ùå –í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ *—Å–∫–∞—Å–æ–≤–∞–Ω–æ* –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
        f"------------------------------------\n"
        f"–ü–æ—Å–ª—É–≥–∞: {service_}\n"
        f"–î–∞—Ç–∞: {date_}\n"
        f"–ß–∞—Å: {time_}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason_text}"
    )
    try:
        await context.bot.send_message(chat_id=client_id, text=msg, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {client_id}: {e}")

    ADMIN_STATE[user_id] = None

async def admin_cancel_booking_main(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    now = datetime.now()
    upper_limit = now + timedelta(days=30)
    bookings_ref = db.collection("bookings").stream()

    upcoming_bookings = []
    for doc in bookings_ref:
        data = doc.to_dict()
        status = data.get("status")
        if status not in ["pending", "confirmed"]:
            continue
        date_str = data.get("date")
        time_str = data.get("time")
        try:
            dt = datetime.strptime(date_str + " " + time_str, "%d.%m.%Y %H:%M")
            if now <= dt <= upper_limit:
                upcoming_bookings.append((doc.id, data))
        except:
            pass

    if not upcoming_bookings:
        await safe_edit_message_text(
            query,
            "–ù–µ–º–∞—î –Ω–∞–π–±–ª–∏–∂—á–∏—Ö (–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö/–≤ –ø—Ä–æ—Ü–µ—Å—ñ) –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ 30 –¥–Ω—ñ–≤ —É–ø–µ—Ä–µ–¥.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")]
            ])
        )
        return

    keyboard = []
    text_header = "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:"
    for booking_id, data in upcoming_bookings:
        user_ = data.get("username", "??")
        date_ = data.get("date", "--.--.----")
        time_ = data.get("time", "--:--")
        serv_ = data.get("service", "–ü–æ—Å–ª—É–≥–∞")
        btn_text = f"{date_} {time_} | {user_} | {serv_}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"admin_cancel_booking_{booking_id}")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")])
    await safe_edit_message_text(
        query,
        text_header,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
async def service_details_menu(update: Update, context: CallbackContext, doc_id: str):
    # –Ø–∫—â–æ –≤–∏–∫–ª–∏–∫ —ñ–∑ callback, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ, —ñ–Ω–∞–∫—à–µ - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        send_method = query.edit_message_text
    else:
        send_method = update.message.reply_text

    service_data = services_cache.get(doc_id, {})
    name = service_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
    price = service_data.get("price", "0 —î–≤—Ä–æ")
    duration = service_data.get("duration", "N/A")
    text = (
        f"–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–ª—É–≥—É:\n\n"
        f"–ù–∞–∑–≤–∞: {name}\n"
        f"–¶—ñ–Ω–∞: {price}\n"
        f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} —Ö–≤"
    )
    keyboard = [
        [InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"service_edit_{doc_id}")],
        [InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"service_delete_{doc_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="service_add_edit_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_method(text=text, reply_markup=reply_markup)

    
async def service_edit_menu(update: Update, context: CallbackContext, doc_id: str):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–∑–≤–∏, —Ü—ñ–Ω–∏ –∞–±–æ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ.
    """
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–≤–∞", callback_data=f"edit_name_{doc_id}")],
        [InlineKeyboardButton("–¶—ñ–Ω–∞", callback_data=f"edit_price_{doc_id}")],
        [InlineKeyboardButton("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback_data=f"edit_duration_{doc_id}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"service_edit_select_{doc_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(query, "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:", reply_markup=reply_markup)

    
async def service_delete_confirm(update: Update, context: CallbackContext, doc_id: str):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏ —ñ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.
    """
    query = update.callback_query
    await query.answer()
    service_data = services_cache.get(doc_id, {})
    name = service_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
    price = service_data.get("price", "0 —î–≤—Ä–æ")
    duration = service_data.get("duration", "N/A")
    text = f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ—Å–ª—É–≥—É?\n\n" \
           f"–ù–∞–∑–≤–∞: {name}\n–¶—ñ–Ω–∞: {price}\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} —Ö–≤"
    keyboard = [
        [InlineKeyboardButton("–¢–∞–∫", callback_data=f"confirm_delete_{doc_id}")],
        [InlineKeyboardButton("–ù—ñ", callback_data=f"service_edit_select_{doc_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(query, text, reply_markup=reply_markup)
    
async def service_add_edit_main(update: Update, context: CallbackContext):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó.
    """
    query = update.callback_query
    await query.answer()
    services_list = list(services_cache.items())  # (doc_id, data)
    services_list.sort(key=lambda x: x[1].get("name", ""))
    keyboard = []
    for doc_id, data in services_list:
        service_name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        # –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –ø–µ—Ä–µ–¥–∞—î–º–æ doc_id –≤ callback_data
        keyboard.append([InlineKeyboardButton(service_name, callback_data=f"service_edit_select_{doc_id}")])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–æ—Å–ª—É–≥—É", callback_data="service_add_new")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_services_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É:"
    await safe_edit_message_text(query, text, reply_markup=reply_markup)


# 1. –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é "–ó–∞–ø–∏—Å–∏"# 1. –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é "–ó–∞–ø–∏—Å–∏" (Records Menu)
async def show_records_menu(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in ADMIN_USER_IDS:
        
    
        # –ú–µ–Ω—é –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ", callback_data="records_confirmed")],
            [InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ", callback_data="records_rejected")],
            [InlineKeyboardButton("–ú–∏–Ω—É–ª—ñ", callback_data="records_past")],
        ]
    else:
        # –ú–µ–Ω—é –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
        keyboard = [
            [InlineKeyboardButton("–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–Ü", callback_data="client_confirmed_bookings")],
            [InlineKeyboardButton("–í –ü–†–û–¶–ï–°–Ü", callback_data="client_pending_bookings")],
            [InlineKeyboardButton("–ú–ò–ù–£–õ–Ü", callback_data="client_past_bookings")],
            [InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back_to_main_menu_text")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∏—Å—ñ–≤:", reply_markup=reply_markup)
    else:
        await safe_edit_message_text(update.callback_query, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∏—Å—ñ–≤:", reply_markup=reply_markup)

# 2. –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö

async def show_records(update: Update, context: CallbackContext, status: str = None, date: str = None):
    query = update.callback_query
    user_id = query.from_user.id
    
    data = query.data
    if status is None and data.startswith("records_"):
        status_from_data = data.split("_", 1)[1]  # "confirmed", "rejected" –∞–±–æ "past"
        # –î–∞–ª—ñ –º–æ–∂–Ω–∞ –ø—ñ–¥–º—ñ–Ω–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É:
        status = status_from_data

    if status:

        if status:
            bookings = db.collection("bookings").where("status", "==", status).order_by("date", direction=firestore.Query.DESCENDING).limit(10).stream()
        elif date:
            bookings = db.collection("bookings").where("date", "==", date).order_by("time", direction=firestore.Query.DESCENDING).limit(10).stream()
        else:
            await query.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç.")
            return

    records = [doc.to_dict() for doc in bookings]

    if not records:
        await query.edit_message_text("–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return

    message = "–ó–∞–ø–∏—Å–∏:\n"
    message += "ID".ljust(15) + "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á".ljust(20) + "–ü–æ—Å–ª—É–≥–∞".ljust(25) + "–î–∞—Ç–∞".ljust(15) + "–ß–∞—Å".ljust(10) + "–¶—ñ–Ω–∞".ljust(10) + "–°—Ç–∞—Ç—É—Å\n"
    message += "=" * 95 + "\n"
    for record in records:
        message += f"{record['booking_id'][:14].ljust(15)}{record['username'][:19].ljust(20)}{record['service'][:24].ljust(25)}{record['date'].ljust(15)}{record['time'].ljust(10)}{str(record['price']).ljust(10)}{record['status']}\n"

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_records_menu")],
        InlineKeyboardButton("–í—Å—ñ –∑–∞–ø–∏—Å–∏", callback_data=f"all_records_{status if status else (date if date else 'all')}")
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, reply_markup=reply_markup)
    
from fpdf import FPDF
import os
import time
import logging

from fpdf import FPDF
import os
import time
import logging

logger = logging.getLogger(__name__)

async def send_filtered_records_pdf(update, context, status_filter=None):
    query = update.callback_query
    if status_filter is None:
        data = query.data.split("_")
        if len(data) > 2:
            status_filter = data[2]
        else:
            await query.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É!", show_alert=True)
            return


@blacklist_protected
async def send_filtered_records_pdf(update: Update, context: CallbackContext, status_filter=None):

    # –î—ñ—Å—Ç–∞—î–º–æ status_filter –∑ callback_data
    query = update.callback_query
    data = query.data  # —Ç–∏–ø–æ–≤–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "all_records_confirmed"

    # –¢–µ–ø–µ—Ä –ø–∞—Ä—Å–∏–º–æ —Å—Ç–∞—Ç—É—Å (–ø—Ä–∏–ø—É—Å—Ç—ñ–º–æ, —Ñ–æ—Ä–º–∞—Ç "all_records_–Ω–∞–∑–≤–∞–°—Ç–∞—Ç—É—Å—É"):
    parts = data.split("_", 2)  # ["all", "records", "confirmed"]
    if len(parts) < 3:
        await query.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π callback_data (–Ω–µ–º–∞—î —Å—Ç–∞—Ç—É—Å—É)!")
        return

    status_filter = parts[2]  # "confirmed" / "past" / "rejected" / –±—É–¥—å‚Äê—â–æ —ñ–Ω—à–µ
    ...
    # —Ä–µ—à—Ç–∞ –ª–æ–≥—ñ–∫–∏ –¥–ª—è PDF


    status_filter = parts[2]  # "confirmed", "rejected", "past" —Ç–æ—â–æ

    # –î–∞–ª—ñ –π–¥–µ –ª–æ–≥—ñ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF:
    # ---------------------------------------------------------------
    CACHE_FILE = f"bookings_{status_filter}.pdf"
    CACHE_DURATION = 600  # 10 —Ö–≤–∏–ª–∏–Ω

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ chat_id
    chat_id = None
    if update.message and update.message.chat_id:
        chat_id = update.message.chat_id
    elif update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat_id

    if chat_id is None:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id, PDF –Ω–µ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à (–Ω–µ —Å—Ç–∞—Ä—à–∏–π –∑–∞ CACHE_DURATION —Å–µ–∫—É–Ω–¥)
    import os, time
    if os.path.exists(CACHE_FILE) and (time.time() - os.path.getmtime(CACHE_FILE)) < CACHE_DURATION:
        try:
            await context.bot.send_document(
                chat_id=chat_id,
                document=open(CACHE_FILE, "rb"),
                filename=CACHE_FILE,
                caption=f"üìÑ –ó–∞–ø–∏—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º {status_filter} (–∫–µ—à–æ–≤–∞–Ω–∏–π PDF)"
            )
            return
        except Exception as e:
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–µ—à–æ–≤–∞–Ω–∏–π PDF: {e}")

    # –Ø–∫—â–æ –∫–µ—à—É –∞–±–æ –≤—ñ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤ ‚Äì –∑–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ —Ñ–æ—Ä–º—É—î–º–æ PDF
    from fpdf import FPDF
    if status_filter == "past":
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "past" ‚Äì —Ü–µ –≤—Å—ñ –¥–∞—Ç–∏ –¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ
        today = datetime.today().strftime("%d.%m.%Y")
        bookings_cursor = db.collection("bookings").where("date", "<", today).stream()
    else:
        # –Ü–Ω–∞–∫—à–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø—Ä–æ—Å—Ç–æ –∑–∞ –ø–æ–ª–µ–º "status"
        bookings_cursor = db.collection("bookings").where("status", "==", status_filter).stream()

    records = [doc.to_dict() for doc in bookings_cursor]
    if not records:
        await context.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: {status_filter}.")
        return

    # –ì–µ–Ω–µ—Ä—É—î–º–æ PDF
    pdf = FPDF()
    pdf.add_page()
    font_path = r"C:\Users\reset\OneDrive\–†–æ–±–æ—á–∏–π —Å—Ç—ñ–ª\vps server\dejavu-fonts-ttf-2.37\ttf\DejaVuSansCondensed.ttf"
    pdf.add_font("DejaVu", "", "./DejaVuSansCondensed.ttf", uni=True)
    pdf.set_font("DejaVu", "", 10)


    pdf.cell(0, 10, f"–ó–∞–ø–∏—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º {status_filter}", ln=True, align="C")
    pdf.ln(5)

    headers = ["–Ü–º'—è", "–ü–æ—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–ß–∞—Å", "–¶—ñ–Ω–∞"]
    col_widths = [40, 50, 25, 20, 20]
    pdf.set_font("DejaVu", "", 9)
    # –†—è–¥–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    for i, header in enumerate(headers):
        pdf.cell(col_widths[i], 8, header, border=1, align="C")
    pdf.ln()

    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    for b in records:
        row = [
            str(b.get("username", "-")),
            str(b.get("service", "-")),
            str(b.get("date", "--.--.----")),
            str(b.get("time", "--:--")),
            str(b.get("price", "-"))
        ]
        for i, item in enumerate(row):
            pdf.cell(col_widths[i], 8, item, border=1, align="C")
        pdf.ln()

    pdf.output(CACHE_FILE, "F")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
    try:
        await context.bot.send_document(
            chat_id=chat_id,
            document=open(CACHE_FILE, "rb"),
            filename=CACHE_FILE,
            caption=f"üìÑ –ó–∞–ø–∏—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º {status_filter}"
        )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ PDF: {e}")
    # ---------------------------------------------------------------



async def handle_date_input(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if update.message:
        text = update.message.text.strip()
    else:
        text = update.callback_query.data.split("_")[-1]

    try:
        datetime.strptime(text, "%d.%m.%Y")
        await show_records(update, context, date=text)
    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†.")

async def show_records_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ", callback_data="records_confirmed")],
        [InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–µ–Ω—ñ", callback_data="records_rejected")],
        [InlineKeyboardButton("–ú–∏–Ω—É–ª—ñ", callback_data="records_past")],
        [InlineKeyboardButton("–ó–∞ –¥–∞—Ç–æ—é", callback_data="records_by_date")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_menu_text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Å—ñ–≤:"

    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# –î–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ‚Äì —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ user_id
# –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º)
async def get_admin_records(status_filter: str, past: bool) -> list:
    now = datetime.now()
    records = []
    if status:
        bookings = db.collection("bookings").where("status", "==", status).order_by("date", direction=firestore.Query.DESCENDING).limit(10).stream()
        for doc in db.collection("bookings").stream():
            data = doc.to_dict()
            try:
                record_dt = datetime.strptime(f"{data.get('date')} {data.get('time')}", "%d.%m.%Y %H:%M")
            except Exception:
                continue
            if status_filter in ["confirmed", "pending", "rejected"]:
                if data.get("status", "").lower() != status_filter:
                    continue
            if past:
                if record_dt < now:
                    records.append((doc.id, data))
            else:
                if record_dt >= now:
                    records.append((doc.id, data))
                return records

## –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º)
async def get_admin_records(status_filter: str, past: bool) -> list:
    now = datetime.now()
    records = []
    for doc in db.collection("bookings").stream():
        data = doc.to_dict()
        try:
            record_dt = datetime.strptime(f"{data.get('date')} {data.get('time')}", "%d.%m.%Y %H:%M")
        except Exception:
            continue
        if status_filter in ["confirmed", "pending", "rejected"]:
            if data.get("status", "").lower() != status_filter:
                continue
        if past:
            if record_dt < now:
                records.append((doc.id, data))
        else:
            if record_dt >= now:
                records.append((doc.id, data))
    return records

# 3. –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤ —ñ–∑ –∫–Ω–æ–ø–∫–∞–º–∏ "–î–ï–¢–ê–õ–Ü" —Ç–∞ "–ù–ê–ó–ê–î"from telegram import InlineKeyboardButton, InlineKeyboardMarkup



async def show_bookings_by_status(update: Update, context: CallbackContext, status: str = None):
    query = update.callback_query
    await query.answer()

    logger.info(f"üîç Showing bookings with status: {status}")

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ –≤–∏–±—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    bookings_ref = db.collection("bookings").where("status", "==", status).stream()
    bookings = [(doc.id, doc.to_dict()) for doc in bookings_ref]

    if not bookings:
        await safe_edit_message_text(query, f"üòï –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'.")
        return

    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    keyboard = []
    text_header = f"üìÇ –ó–∞–ø–∏—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':\n"

    for doc_id, data in bookings:
        time_ = data.get("time", "--:--")
        date_ = data.get("date", "--.--.----")
        user_ = data.get("username", "???")
        service_ = data.get("service", "–ü–æ—Å–ª—É–≥–∞")

        btn_text = f"{date_} | {time_} | {user_} | {service_}"
        keyboard.append([
            InlineKeyboardButton(
                btn_text,
                callback_data=f"record_details_{doc_id}_status_{status}"
            )
        ])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await safe_edit_message_text(query, text_header, reply_markup=reply_markup)



async def send_admin_bookings(update: Update, context: CallbackContext, status: str, past: bool = False):
    """
    Shows the administrator a list of bookings with the given status and timeframe.
    :param update: The Telegram Update object.
    :param context: The Telegram CallbackContext object.
    :param status: The booking status to filter by (e.g., "confirmed", "rejected").
    :param past: If True, fetches past bookings; otherwise, fetches future bookings.
    """
    query = update.callback_query
    if query:
        await query.answer()
    else:
        # If invoked via message (rare), handle it accordingly
        pass

    # Fetch all bookings from Firestore
# Fetch all bookings from Firestore
    now = datetime.now()
    all_bookings = db.collection("bookings").stream()

    # Initialize the list outside the loop
    bookings = []

    for doc in all_bookings:
        data = doc.to_dict()
        # Filter based on the provided status (for example)
        if data.get("status", "").lower() == status.lower():
            try:
                record_dt = datetime.strptime(f"{data.get('date', '')} {data.get('time', '')}", "%d.%m.%Y %H:%M")
            except Exception:
                continue

            # Filter by timeframe (past or future)
            if past:
                if record_dt < now:
                    bookings.append((doc.id, data))
            else:
                if record_dt >= now:
                    bookings.append((doc.id, data))


    if not bookings:
        text = f"–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: {status}"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if query:
            await safe_edit_message_text(query, text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
        return

    # Build the list of buttons for each booking
    keyboard = []
    text_header = f"–ó–∞–ø–∏—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':\n"
    for doc_id, data in bookings:
        time_ = data.get("time", "--:--")
        date_ = data.get("date", "--.--.----")
        user_ = data.get("username", "???")
        service_ = data.get("service", "–ü–æ—Å–ª—É–≥–∞")
        btn_text = f"{date_} | {time_} | {user_} | {service_}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"view_record_details_{doc_id}_admin_bookings_main")])


    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await safe_edit_message_text(query, text_header, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text_header, reply_markup=reply_markup)

async def service_delete_service(update: Update, context: CallbackContext, doc_id: str):
    """
    –í–∏–¥–∞–ª—è—î –ø–æ—Å–ª—É–≥—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, –æ–Ω–æ–≤–ª—é—î –∫–µ—à —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥.
    """
    query = update.callback_query
    await query.answer()
    db.collection("services").document(doc_id).delete()
    refresh_services_cache()
    await safe_edit_message_text(query, "–ü–æ—Å–ª—É–≥—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
    await service_add_edit_main(update, context)

# ========= CALLBACK QUERY HANDLER =========
@blacklist_protected
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    status = None  
    logger.info(f"‚ö° Button clicked: {data}")
    
    if data.startswith("view_record_details_"):
        await view_record_details(update, context)
    elif data.startswith("record_details_"):  # –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É record_details_
        await view_record_details(update, context)
    elif data == "admin_bookings_main":
        await admin_bookings_menu(update, context)
        
        # -- –î–æ–¥–∞–Ω–æ: –æ–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    if data.startswith("stat_") or data.startswith("stat_menu"):
        await statistics_callback_handler(update, context)
        return
    
    if data == "client_menu":
        await show_client_menu(update, context)
        return
    
        # --- –Ü–°–¢–û–†–Ü–Ø –∞–¥–º—ñ–Ω–∞ ---
    if data == "admin_records_menu":
        await show_records_menu(update, context)
        return
    
        # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏"
    if data == "get_all_records":
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É: TXT, PDF, –∞–±–æ "–ù–∞–∑–∞–¥"
        keyboard = [
            [
                InlineKeyboardButton("TXT", callback_data="export_all_txt"),
                InlineKeyboardButton("PDF", callback_data="export_all_pdf"),
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_records_menu")]  # –∞–±–æ –∫—É–¥–∏ —Ç—Ä–µ–±–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.answer()
        await safe_edit_message_text(query, "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É:", reply_markup=reply_markup)
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ TXT
    if data == "export_all_txt":
        await query.answer()
        await send_all_records_in_txt(query, context)
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ PDF
    if data == "export_all_pdf":
        await query.answer()
        await send_all_records_in_pdf(query, context)
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–∏—Å–Ω–µ "–ù–∞–∑–∞–¥" –Ω–∞ —Ç—ñ–π –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ,
    # –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –π–æ–≥–æ –¥–æ "display_records_list" –∞–±–æ –≤ "admin_bookings_menu",
    # –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∞—à–æ—ó –ª–æ–≥—ñ–∫–∏:
    if data == "back_to_records_menu":
        await admin_bookings_menu(update, context)  # –∞–±–æ show_records_menu(update, context)
        return

    
    if data == "client_search_results":
        await show_client_search_results(update, context)
        return

    if data == "client_search":
        await client_search_prompt(update, context)
        return

    if data == "client_history_menu":
        await client_history_prompt(update, context)
        return

    if data == "client_blacklist_menu":
        await client_blacklist_prompt(update, context)
        return

    if data.startswith("client_details_"):
        client_id = data.split("_")[-1]
        await client_details(update, context, client_id)
        return

    if data.startswith("client_history_"):
        client_id = data.split("_")[-1]
        await client_history_details(update, context, client_id)
        return

    if data.startswith("client_blacklist_details_"):
        client_id = data.split("_")[-1]
        await client_blacklist_details(update, context, client_id)
        return
    
    if data == "admin_records_menu":
        await show_records_menu(update, context)
        return


    if data.startswith("client_blacklist_confirm_") or \
    data.startswith("client_blacklist_remove_") or \
    data.startswith("client_blacklist_confirm_yes_") or \
    data.startswith("client_blacklist_confirm_no_") or \
    data.startswith("client_blacklist_remove_yes_") or \
    data.startswith("client_blacklist_remove_no_"):
        await handle_client_blacklist_callback(update, context)
        return


    if data.startswith("client_blacklist_confirm_") or data.startswith("client_blacklist_cancel_"):
        await handle_client_blacklist_callback(update, context)
        return

  
    # --- –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ù–ê–î–°–ò–õ–ê–ù–ù–Ø –°–ü–û–í–Ü–©–ï–ù–ù–Ø ---
    if data.startswith("confirm_send_notification_yes_"):
        booking_id = data.split("_")[-1]
        notification_text = context.user_data.get("notification_text", "")
        booking_ref = db.collection("bookings").document(booking_id)
        booking_doc = booking_ref.get()
        if booking_doc.exists:
            booking_data = booking_doc.to_dict()
            client_username = booking_data.get("username", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
            client_id = booking_data.get("user_id")
            try:
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ HTML
                await context.bot.send_message(
                    chat_id=client_id,
                    text=f"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{html.escape(notification_text)}",
                    parse_mode="HTML"
                )
                # –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ–º—É –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —ñ–∑ –¥–µ—Ç–∞–ª—è–º–∏
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=(
                        f"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:</b> {client_username}\n\n"
                        f"<b>–¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n<pre>{html.escape(notification_text)}</pre>"
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {client_id}: {e}")
        ADMIN_STATE[user_id] = None
        context.user_data.pop("notification_text", None)
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        try:
            await query.message.delete()
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return

    if data.startswith("confirm_send_notification_no_"):
        booking_id = data.split("_")[-1]
        try:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
            )
            await query.message.delete()
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        ADMIN_STATE[user_id] = None
        context.user_data.pop("notification_text", None)
        return

    # --- –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –°–ö–ê–°–£–í–ê–ù–ù–Ø –ó–ê–ü–ò–°–£ ---
    if data.startswith("confirm_cancel_booking_yes_"):
        booking_id = data.split("_")[-1]
        booking_ref = db.collection("bookings").document(booking_id)
        booking_doc = booking_ref.get()
        if booking_doc.exists:
            booking_data = booking_doc.to_dict()
            date_ = booking_data.get("date")
            time_ = booking_data.get("time")
            duration_ = booking_data.get("duration", 30)
            booked_for_date = booked_slots.get(date_, [])
            start_time = datetime.strptime(time_, "%H:%M")
            slots_needed = duration_ // 30
            for i in range(slots_needed):
                t_str = (start_time + timedelta(minutes=30 * i)).strftime("%H:%M")
                if t_str in booked_for_date:
                    booked_for_date.remove(t_str)
            booked_slots[date_] = booked_for_date
            booking_ref.update({"status": "canceled"})
            cancel_reason = context.user_data.get("cancel_reason", "")
            cancellation_details = (
                f"<b>–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ!</b>\n"
                f"------------------------------------\n"
                f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {booking_data.get('username', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}\n"
                f"<b>–ü–æ—Å–ª—É–≥–∞:</b> {booking_data.get('service', '–ü–æ—Å–ª—É–≥–∞')}\n"
                f"<b>–î–∞—Ç–∞:</b> {date_}\n"
                f"<b>–ß–∞—Å:</b> {time_}\n"
                f"<b>–¶—ñ–Ω–∞:</b> {booking_data.get('price', 'N/A')}\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:</b> {html.escape(cancel_reason)}"
            )
            try:
                await context.bot.send_message(
                    chat_id=booking_data.get("user_id"),
                    text=cancellation_details,
                    parse_mode="HTML"
                )
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤–∏–∫–æ–Ω–∞–Ω–æ:\n\n{cancellation_details}",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {booking_data.get('user_id')}: {e}")
        ADMIN_STATE[user_id] = None
        context.user_data.pop("cancel_reason", None)
        try:
            await query.message.delete()
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é: {e}")
        return

    if data.startswith("confirm_cancel_booking_no_"):
        booking_id = data.split("_")[-1]
        try:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
            )
            await query.message.delete()
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é: {e}")
        ADMIN_STATE[user_id] = None
        context.user_data.pop("cancel_reason", None)
        return


    # --- –ö–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é ---
    if data == "back_to_main_menu_text":
        if user_id in ADMIN_USER_IDS:
            await show_admin_menu(update)
        else:
            await show_user_menu(update)
        return

    if data == "back_to_services":
        await book_service(update, context)
        return

    if data == "back_to_history_menu":
        await booking_history(update, context)
        return


    if data == "back_to_admin_menu":
        await show_admin_menu(update)
        return

    if data == "back_to_schedule_main":
        await show_schedule_menu(update, context)
        return

    if data == "back_to_services_menu":
        await show_services_settings_menu(update, context)
        return

    # --- –Ü–°–¢–û–†–Ü–Ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
    if data == "confirmed_bookings":
        await send_user_bookings(update, context, status="confirmed", past=False)
        return
    if data == "pending_bookings":
        await send_user_bookings(update, context, status="pending")
        return
    if data == "past_bookings":
        await send_user_bookings(update, context, status="confirmed", past=True)
        return
    if data == "user_orders":
        await send_user_orders(update, context)
        return
    
    if data == "admin_rejected_bookings":
        # 1) –∑–∞–±–∏—Ä–∞—î–º–æ –∑ –ë–î
        all_docs = db.collection("bookings").where("status","in",["rejected","canceled"]).stream()

        bookings = []
        now = datetime.now()
        for doc_ in all_docs:
            data_ = doc_.to_dict()
            try:
                dt_ = datetime.strptime(
                    data_.get("date","")+" "+data_.get("time",""), "%d.%m.%Y %H:%M"
                )
            except:
                continue
            # –ü—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ —Ñ—ñ–ª—å—Ç—Ä—É—î—Ç–µ –ø–æ –º–∏–Ω—É–ª–æ–º—É/–º–∞–π–±—É—Ç–Ω—å–æ–º—É, —è–∫—â–æ —Ö–æ—á–µ—Ç–µ
            bookings.append((doc_.id, data_))

        if not bookings:
            await safe_edit_message_text(
                query,
                "–ù–µ–º–∞—î –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ (rejected/canceled).",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_bookings_main")]
                ])
            )
            return
        
        # 2) –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É context, —â–æ–± –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –ø—Ä–∞—Ü—é–≤–∞–ª–∞
        context.user_data["current_records"] = bookings
        context.user_data["return_callback"] = "admin_bookings_main"

        # 3) –í–∏–∫–ª–∏–∫–∞—î–º–æ display_records_list
        await display_records_list(update, context, bookings, "admin_bookings_main", page=0, page_size=10)
        return


    # --- –Ü–°–¢–û–†–Ü–Ø –∞–¥–º—ñ–Ω–∞ ---
    if data == "admin_confirmed_bookings":
        records = await get_admin_records("confirmed", past=False)
        await display_records_list(update, context, records, "show_records_menu")
        return
    if status == "rejected":
        # —Ö–æ—á–µ–º–æ "rejected" + "canceled"
        bookings_ref = db.collection("bookings").where("status", "in", ["rejected","canceled"])
    else:
        bookings_ref = db.collection("bookings").where("status", "==", status)

    if data == "admin_past_bookings":
        # –±—É–ª–æ past=False, –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ:
        await send_admin_bookings(update, context, status="confirmed", past=True)
        return
    
    
    status = None  # Default value
    if "status_" in data:
            status = data.split("_")[1]  # Example of extracting status from callback data

    print(f"Extracted status: {status}")  # Debugging

    if status == "rejected":
            await query.answer("The booking has been rejected.")

    if data == "admin_pick_date_for_bookings":
        await admin_pick_date_for_bookings(update, context)    
    if data == "admin_analytics":
        await admin_analytics(update, context)
        return
    if data == "admin_history":
        await admin_history(update, context)
        return

    # --- –ú–µ–Ω—é "–ó–∞–ø–∏—Å–∏" (–∞–¥–º—ñ–Ω) ---
    if data == "admin_bookings_main":
        await admin_bookings_menu(update, context)
        return
    if data == "admin_today_bookings":
        await admin_today_bookings(update, context)
        return
    if data == "admin_pick_date_for_bookings":
        await admin_pick_date_for_bookings(update, context)
        return
    if data == "admin_cancel_booking_main":
        await admin_cancel_booking_main(update, context)
        return
    
    if data.startswith("service_edit_select_"):
        doc_id = data.split("_")[-1]
        await service_details_menu(update, context, doc_id)
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:
    if data.startswith("service_edit_"):
        doc_id = data.split("_")[-1]
        await service_edit_menu(update, context, doc_id)
        return

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:
    if data.startswith("edit_name_"):
        doc_id = data.split("_")[-1]
        ADMIN_STATE[user_id] = f"SERVICE_EDIT_NAME_{doc_id}"
        await query.answer()
        await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏:")
        return
    if data.startswith("edit_price_"):
        doc_id = data.split("_")[-1]
        ADMIN_STATE[user_id] = f"SERVICE_EDIT_PRICE_{doc_id}"
        await query.answer()
        await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É (–ª–∏—à–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 450):")
        return
    if data.startswith("edit_duration_"):
        doc_id = data.split("_")[-1]
        ADMIN_STATE[user_id] = f"SERVICE_EDIT_DURATION_{doc_id}"
        await query.answer()
        await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏ (—Ö–≤–∏–ª–∏–Ω, –Ω–∞–ø—Ä. 45):")
        return

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏: —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if data.startswith("service_delete_"):
        doc_id = data.split("_")[-1]
        await service_delete_confirm(update, context, doc_id)
        return
    if data.startswith("confirm_delete_"):
        doc_id = data.split("_")[-1]
        await service_delete_service(update, context, doc_id)
        return

    
        # ...
    # –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
    if data == "confirm_broadcast_yes":
        user_id = query.from_user.id
        broadcast_text = context.user_data.get("broadcast_message")
        if not broadcast_text:
            await safe_edit_message_text(query, "–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.")
            return
        users_collection = db.collection("users").stream()
        count_sent = 0
        for user_doc in users_collection:
            user_data = user_doc.to_dict()
            chat_id = user_data.get("user_id")
            if chat_id:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=broadcast_text)
                    count_sent += 1
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}: {e}")
        admin_broadcast_mode[user_id] = False
        ADMIN_STATE[user_id] = None
        await safe_edit_message_text(query, f"–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count_sent} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
        return

    if data == "confirm_broadcast_no":
        user_id = query.from_user.id
        admin_broadcast_mode[user_id] = False
        ADMIN_STATE[user_id] = None
        await safe_edit_message_text(query, "–†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return
    # ...


    # --- –î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Å—ñ–≤ ---
    if data.startswith("admin_booking_details_"):
        booking_id = data.split("_")[-1]
        await admin_booking_details(update, context, booking_id)
        return
    
    if data.startswith("admin_show_bookings_for_date_"):
        date_str = data.split("_")[-1]
        await admin_show_bookings_for_date(date_str, update, context)
        return


    # --- –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ---
    if data.startswith("admin_notify_booking_"):
        booking_id = data.split("_")[-1]
        await admin_notify_booking(update, context, booking_id)
        return

    # --- –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å ---
    if data.startswith("admin_cancel_booking_"):
        booking_id = data.split("_")[-1]
        await admin_cancel_booking(update, context, booking_id)
        return

    if data.startswith("admin_confirm_cancel_"):
        booking_id = data.split("_")[-1]
        await admin_confirm_cancel(update, context, booking_id)
        return

    # --- –ó–∞–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –≤–∏–±—ñ—Ä –ø–æ—Å–ª—É–≥–∏, –¥–∞—Ç–∏, —á–∞—Å—É ---
    if data.startswith("book_service_"):
        doc_id = data.split("_", 2)[2]
        user_selection[user_id] = {"service_id": doc_id}
        await select_date(update, context)
        return

    if data == "select_date":
        await select_date(update, context)
        return

    if data.startswith("more_dates_") or data.startswith("previous_dates_"):
        await select_date(update, context)
        return

    if data.startswith("date_"):
        await select_time(update, context)
        return

    if data.startswith("time_"):
        await confirm_selection(update, context)
        return

    if data == "cancel":
        user_selection.pop(user_id, None)
        await safe_edit_message_text(query, "–í–∞—à –∑–∞–ø–∏—Å –±—É–ª–æ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ.")
        return

    if data == "proceed":
        user_data = user_selection.get(user_id, {})
        service_id = user_data.get("service_id")
        date = user_data.get("date")
        time_ = user_data.get("time")

        if not (service_id and date and time_):
            await safe_edit_message_text(query, "–ü–æ–º–∏–ª–∫–∞ —É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        service_data = services_cache.get(service_id, {})
        service_name = service_data.get("name", "–ü–æ—Å–ª—É–≥–∞")
        price = service_data.get("price", "0 —î–≤—Ä–æ")
        duration = service_data.get("duration", 30)

        booked_for_date = booked_slots.get(date, [])
        slots_needed = duration // 30
        start_time = datetime.strptime(time_, "%H:%M")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —â–µ –≤—ñ–ª—å–Ω–∏–π —Å–ª–æ—Ç
        slot_unavailable = False
        for i in range(slots_needed):
            time_str = (start_time + timedelta(minutes=30*i)).strftime("%H:%M")
            if time_str in booked_for_date:
                slot_unavailable = True
                break

        if slot_unavailable:
            await safe_edit_message_text(query, "–í–∏–±–∞—á—Ç–µ, —Ü–µ–π —á–∞—Å —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.")
            await select_time(update, context, selected_date_str=date)
            return

        # –ë—Ä–æ–Ω—é—î–º–æ
        for i in range(slots_needed):
            time_str = (start_time + timedelta(minutes=30 * i)).strftime("%H:%M")
            booked_for_date.append(time_str)
        booked_slots[date] = booked_for_date

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
        booking_ref = db.collection("bookings").document()
        booking_id = booking_ref.id

        username = query.from_user.username
        if not username:
            full_name = " ".join(filter(None, [query.from_user.first_name, query.from_user.last_name]))
            username = full_name if full_name.strip() else str(user_id)

        booking_data = {
            "username": username,
            "user_id": user_id,
            "service_id": service_id,
            "service": service_name,
            "date": date,
            "time": time_,
            "price": price,
            "duration": duration,
            "status": "pending",
            "booking_id": booking_id,
        }
        booking_ref.set(booking_data)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        user_ref = db.collection("users").document(str(user_id))
        if not user_ref.get().exists:
            user_ref.set({
                "username": username,
                "user_id": user_id,
                "first_name": query.from_user.first_name,
                "last_name": query.from_user.last_name,
            })

        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º
        admin_message = (
            f"‚ùóÔ∏è–ù–æ–≤–∏–π –∑–∞–ø–∏—Å:‚ùóÔ∏è\n"
            f"------------------------------------\n"
            f"–ü–æ—Å–ª—É–≥–∞: {service_name}\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–ß–∞—Å: {time_}\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username}\n"
            f"------------------------------------\n"
            f"‚ùî–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —á–∏ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏?"
        )
        admin_keyboard = [
            [
                InlineKeyboardButton("–ü–†–ò–ô–ù–Ø–¢–ò", callback_data=f"accept_{booking_id}"),
                InlineKeyboardButton("–í–Ü–î–•–ò–õ–ò–¢–ò", callback_data=f"reject_{booking_id}"),
            ]
        ]
        admin_reply_markup = InlineKeyboardMarkup(admin_keyboard)

        for admin_chat_id in ADMIN_USER_IDS:
            try:
                await context.bot.send_message(chat_id=admin_chat_id, text=admin_message, reply_markup=admin_reply_markup)
            except Forbidden:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_chat_id}")

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await safe_edit_message_text(
            query,
            "–í—Å–µ –≥–æ—Ç–æ–≤–æ! ‚úÖ\n\n‚ÄºÔ∏è –ó–∞–ø–∏—Å –Ω–∞–±—É–¥–µ —á–∏–Ω–Ω–æ—Å—Ç—ñ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—á—ñ–∫—É–π—Ç–µ! ‚ÄºÔ∏è"
        )
        return

    if data.startswith("accept_"):
        booking_id = data.split("_")[-1]
        # –Ø–∫—â–æ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Å—É –≤–∂–µ —î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Äì –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ
        if booking_id in pending_confirmations:
            await context.bot.send_message(chat_id=query.message.chat_id, 
                text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π.")
            return
        first_message_id = query.message.message_id  # ID –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        booking_ref = db.collection("bookings").document(booking_id)
        booking_doc = booking_ref.get()
        if booking_doc.exists:
            booking_data = booking_doc.to_dict()
            user_name = booking_data.get("username", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
            service_ = booking_data.get("service", "–ü–æ—Å–ª—É–≥–∞")
            date_ = booking_data.get("date", "–î–∞—Ç–∞")
            time_ = booking_data.get("time", "–ß–∞—Å")
            price_ = booking_data.get("price", "–¶—ñ–Ω–∞")
            confirmation_text = (
                f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?\n"
                f"------------------------------------\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}\n"
                f"–ü–æ—Å–ª—É–≥–∞: {service_}\n"
                f"–î–∞—Ç–∞: {date_}\n"
                f"–ß–∞—Å: {time_}\n"
                f"–¶—ñ–Ω–∞: {price_}\n"
            )
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"confirm_accept_yes_{booking_id}"),
                    InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"confirm_accept_no_{booking_id}")
                ] 
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            sent_message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=confirmation_text,
                reply_markup=reply_markup
            )
            pending_confirmations[booking_id] = {
                "first": first_message_id,
                "confirmation": sent_message.message_id
            }
        else:
            await safe_edit_message_text(query, "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ.")
        return

    if data.startswith("confirm_accept_yes_"):
        booking_id = data.split("_")[-1]
        # –í–∏–¥–∞–ª—è—î–º–æ –æ–±–∏–¥–≤–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ
        if booking_id in pending_confirmations:
            ids = pending_confirmations.pop(booking_id)
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=ids["first"])
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=ids["confirmation"])
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        booking_ref = db.collection("bookings").document(booking_id)
        booking_doc = booking_ref.get()
        if booking_doc.exists:
            booking_data = booking_doc.to_dict()
            user_id_ = booking_data.get("user_id")
            service_name = booking_data.get("service", "–ü–æ—Å–ª—É–≥–∞")
            date_ = booking_data.get("date", "–î–∞—Ç–∞")
            time_ = booking_data.get("time", "–ß–∞—Å")
            price = booking_data.get("price", "–¶—ñ–Ω–∞")
            booking_ref.update({"status": "confirmed"})
            confirmation_message = (
                f"‚úÖ –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! ‚úÖ\n"
                f"------------------------------------\n"
                f"–ü–æ—Å–ª—É–≥–∞: {service_name}\n"
                f"–î–∞—Ç–∞: {date_}\n"
                f"–ß–∞—Å: {time_}\n"
                f"–¶—ñ–Ω–∞: {price}\n"
                f"------------------------------------\n"
                f"–ß–µ–∫–∞—î–º–æ –≤–∞—Å —É –Ω–∞—à–æ–º—É –±–∞—Ä–±–µ—Ä—à–æ–ø—ñ!"
            )
            try:
                await context.bot.send_message(chat_id=user_id_, text=confirmation_message)
            except Forbidden:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id_}")
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ.")
        return
    
    if data.startswith("confirm_accept_no_"):
        booking_id = data.split("_")[-1]
        # –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—à–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑ –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–¢–∞–∫¬ª/¬´–ù—ñ¬ª)
        if booking_id in pending_confirmations:
            ids = pending_confirmations.pop(booking_id)
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=ids["confirmation"])
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await context.bot.send_message(chat_id=query.message.chat_id, text="–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω.")
        return


    if data.startswith("reject_"):
        booking_id = data[len("reject_"):]
        if booking_id in pending_confirmations:
            await context.bot.send_message(chat_id=query.message.chat_id, 
                text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π.")
            return
        first_message_id = query.message.message_id
        booking_ref = db.collection("bookings").document(booking_id)
        booking_doc = booking_ref.get()
        if booking_doc.exists:
            booking_data = booking_doc.to_dict()
            user_name = booking_data.get("username", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
            service_ = booking_data.get("service", "–ü–æ—Å–ª—É–≥–∞")
            date_ = booking_data.get("date", "–î–∞—Ç–∞")
            time_ = booking_data.get("time", "–ß–∞—Å")
            price_ = booking_data.get("price", "–¶—ñ–Ω–∞")
            confirmation_text = (
                f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?\n"
                f"------------------------------------\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name}\n"
                f"–ü–æ—Å–ª—É–≥–∞: {service_}\n"
                f"–î–∞—Ç–∞: {date_}\n"
                f"–ß–∞—Å: {time_}\n"
                f"–¶—ñ–Ω–∞: {price_}\n"
            )
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"confirm_reject_yes_{booking_id}"),
                    InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"confirm_reject_no_{booking_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            sent_message = await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=confirmation_text,
                reply_markup=reply_markup
            )
            pending_confirmations[booking_id] = {
                "first": first_message_id,
                "confirmation": sent_message.message_id
            }
        else:
            await safe_edit_message_text(query, "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ.")
        return

        
    if data.startswith("confirm_reject_yes_"):
        booking_id = data.split("_")[-1]
        if booking_id in pending_confirmations:
            ids = pending_confirmations.pop(booking_id)
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=ids["first"])
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=ids["confirmation"])
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        booking_ref = db.collection("bookings").document(booking_id)
        booking_doc = booking_ref.get()
        if booking_doc.exists:
            booking_data = booking_doc.to_dict()
            user_id_ = booking_data.get("user_id")
            service_name = booking_data.get("service", "–ü–æ—Å–ª—É–≥–∞")
            date_ = booking_data.get("date", "–î–∞—Ç–∞")
            time_ = booking_data.get("time", "–ß–∞—Å")
            price = booking_data.get("price", "–¶—ñ–Ω–∞")
            duration_ = booking_data.get("duration", 30)  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞–ø–∏—Å—É
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ —Å–ª–æ—Ç–∏:
            booked_for_date = booked_slots.get(date_, [])
            start_time = datetime.strptime(time_, "%H:%M")
            slots_needed = duration_ // 30
            for i in range(slots_needed):
                t_str = (start_time + timedelta(minutes=30 * i)).strftime("%H:%M")
                if t_str in booked_for_date:
                    booked_for_date.remove(t_str)
            booked_slots[date_] = booked_for_date

            booking_ref.update({"status": "rejected"})
            rejection_message = (
                f"‚ùå –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå\n"
                f"------------------------------------\n"
                f"–ü–æ—Å–ª—É–≥–∞: {service_name}\n"
                f"–î–∞—Ç–∞: {date_}\n"
                f"–ß–∞—Å: {time_}\n"
                f"–¶—ñ–Ω–∞: {price}\n"
                f"------------------------------------\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —á–∞—Å –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            try:
                await context.bot.send_message(chat_id=user_id_, text=rejection_message)
            except Forbidden:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id_}")
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!")
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ.")
        return




    if data.startswith("confirm_reject_no_"):
        booking_id = data.split("_")[-1]
        if booking_id in pending_confirmations:
            ids = pending_confirmations.pop(booking_id)
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=ids["confirmation"])
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await context.bot.send_message(chat_id=query.message.chat_id, text="–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω.")
        return



    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–ó–∞–º–æ–≤–∏—Ç–∏" –∫–æ—Å–º–µ—Ç–∏–∫—É
    if data == "order_cosmetics":
        message = (
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @shvetsnazar_barber "
            "–¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –î—è–∫—É—î–º–æ! üòä‚úÇÔ∏è"
        )
        await safe_edit_message_text(query, message)
        return

    # --- –†–æ–∑–∫–ª–∞–¥ ---
    if data == "schedule_same_for_week":
        await schedule_set_same_for_week(update, context)
        return
    if data == "schedule_daily":
        await schedule_set_daily(update, context)
        return
    if data == "schedule_days_off":
        await schedule_set_days_off(update, context)
        return
    if data == "schedule_edit_date_range":
        await schedule_edit_date_range(update, context)
        return
    if data == "schedule_view":
        await schedule_view(update, context)
        return
    if data == "daily_schedule_save":
        await safe_edit_message_text(query, "‚úÖ –í—Å—ñ –∑–º—ñ–Ω–∏ –≤–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!", reply_markup=None)
        return
    
    if data.startswith("daily_schedule_day_"):
        day_index = int(data.split("_")[-1])
        ADMIN_STATE[user_id] = f"DAILY_SCHEDULE_DAY_{day_index}"
        await safe_edit_message_text(
            query,
            f"–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —Ä–æ–±–æ—Ç–∏ –¥–ª—è {get_weekday_name_ua(day_index)} —É —Ñ–æ—Ä–º–∞—Ç—ñ 09:00-18:00 –∞–±–æ '–≤–∏—Ö—ñ–¥–Ω–∏–π':"
        )
        return

    if data.startswith("toggle_day_off_"):
        day_index = int(data.split("_")[-1])
        current_off = DEFAULT_WEEK_SCHEDULE[day_index]["off"]
        DEFAULT_WEEK_SCHEDULE[day_index]["off"] = not current_off
        # –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ –π –ø–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–µ–Ω—é
        await show_days_off_menu(query, context)
        return

    if data == "finish_set_days_off":
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ –ë–î
        save_default_schedule_to_db()
        ADMIN_STATE[user_id] = None
        await safe_edit_message_text(
            query,
            "–í–∏—Ö—ñ–¥–Ω—ñ –¥–Ω—ñ (–¥–µ—Ñ–æ–ª—Ç) –æ–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data="schedule_days_off")],
                [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫", callback_data="schedule_view")],
                [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_admin_menu")]
            ])
        )
        return

    # --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥ ---
    if data == "service_add_edit_main":
        await service_add_edit_main(update, context)
        return
    if data == "service_add_new":
        await service_add_new(update, context)
        return
    if data.startswith("service_edit_select_"):
        doc_id = data.split("_")[-1]
        await service_edit_select(update, context, doc_id)
        return
    if data == "service_change_price":
        await service_change_price_main(update, context)
        return
    if data == "service_toggle_active":
        await service_toggle_active_main(update, context)
        return
    if data.startswith("service_price_select_"):
        doc_id = data.split("_")[-1]
        await query.answer()
        context.user_data["change_price_service_id"] = doc_id
        ADMIN_STATE[user_id] = "SERVICE_CHANGE_PRICE"
        service_data = services_cache.get(doc_id, {})
        current_price = service_data.get("price", "0 —î–≤—Ä–æ")
        await safe_edit_message_text(
            query,
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É —É —î–≤—Ä–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '15'):"
        )
        return

    if data.startswith("service_toggle_active_"):
        doc_id = data.split("_")[-1]
        service_data = services_cache.get(doc_id, {})
        if not service_data:
            await query.answer("–ü–æ—Å–ª—É–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        new_status = not service_data.get("active", False)
        update_service_in_db(doc_id, {"active": new_status})
        await service_toggle_active_main(update, context)
        return

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å
    await query.answer()
    
    

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ—Å–ª—É–≥–∏
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

async def show_top_services_periods(update: Update, context: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton("14 –¥–Ω—ñ–≤", callback_data="stat_top_14"),
            InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å", callback_data="stat_top_30")
        ],
        [
            InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ", callback_data="stat_top_90"),
            InlineKeyboardButton("6 –º—ñ—Å—è—Ü—ñ–≤", callback_data="stat_top_180")
        ],
        [
            InlineKeyboardButton("9 –º—ñ—Å—è—Ü—ñ–≤", callback_data="stat_top_270"),
            InlineKeyboardButton("12 –º—ñ—Å—è—Ü—ñ–≤", callback_data="stat_top_365")
        ],
        [
            InlineKeyboardButton("Custom", callback_data="stat_top_custom"),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="stat_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É ¬´–¢–æ–ø –ø–æ—Å–ª—É–≥¬ª:", reply_markup=reply_markup)
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É ¬´–¢–æ–ø –ø–æ—Å–ª—É–≥¬ª:", reply_markup=reply_markup)


async def handle_admin_text_states(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not update.message or not update.message.text:
        return  # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ update.message –≤—ñ–¥—Å—É—Ç–Ω—î

    text = update.message.text.strip()
    current_state = ADMIN_STATE.get(user_id, None)  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è current_state

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ—Ä–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∫–ª–∞—Å—É InlineKeyboardButton
    assert InlineKeyboardButton, "InlineKeyboardButton is not imported correctly!"
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–¥–Ω–æ–º—É –∑ –Ω–æ–≤–∏—Ö —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
    if current_state in ["CLIENT_SEARCH_INPUT", "CLIENT_HISTORY_INPUT", "CLIENT_BLACKLIST_INPUT"]:
        await handle_client_text_states(update, context)
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if current_state == "STAT_COUNT_INPUT":
        period = parse_date_range(text)
        if not period:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY-DD.MM.YYYY.")
            return
        start_date, end_date = period
        await process_stat_count_input_with_dates(update, context, start_date, end_date)
        ADMIN_STATE[user_id] = None
        return

    if current_state == "STAT_TOP_INPUT":
        period = parse_date_range(text)
        if not period:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY-DD.MM.YYYY.")
            return
        start_date, end_date = period
        await process_stat_top_input_with_dates(update, context, start_date, end_date)
        ADMIN_STATE[user_id] = None
        return

    if current_state == "STAT_AVG_INPUT":
        period = parse_date_range(text)
        if not period:
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY-DD.MM.YYYY.")
            return
        start_date, end_date = period
        await process_stat_avg_input_with_dates(update, context, start_date, end_date)
        ADMIN_STATE[user_id] = None
        return

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–æ—Å–ª—É–≥–∏
    if current_state and current_state.startswith("SERVICE_EDIT_NAME_"):
        doc_id = current_state.split("_")[-1]
        update_service_in_db(doc_id, {"name": text})
        ADMIN_STATE[user_id] = None
        refresh_services_cache()
        await service_details_menu(update, context, doc_id)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return

    # --- –û–ë–†–û–ë–ö–ê –í–í–ï–î–ï–ù–û–ì–û –¢–ï–ö–°–¢–£ –î–õ–Ø –°–ü–û–í–Ü–©–ï–ù–ù–Ø ---
    if current_state and current_state.startswith("ADMIN_SEND_NOTIFICATION_"):
        if not current_state.startswith("ADMIN_SEND_NOTIFICATION_CONFIRM_"):
            booking_id = current_state.split("_")[-1]
            context.user_data["notification_text"] = text  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            
            ADMIN_STATE[user_id] = f"ADMIN_SEND_NOTIFICATION_CONFIRM_{booking_id}"
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"confirm_send_notification_yes_{booking_id}"),
                    InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"confirm_send_notification_no_{booking_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"–í–∏ –≤–≤–µ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É:\n\n{text}\n\n"
                f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –π–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏?",
                reply_markup=reply_markup
            )
            return

    # --- –û–ë–†–û–ë–ö–ê –í–í–ï–î–ï–ù–û–ì–û –¢–ï–ö–°–¢–£ –î–õ–Ø –°–ö–ê–°–£–í–ê–ù–ù–Ø –ó–ê–ü–ò–°–£ ---
    if current_state and current_state.startswith("ADMIN_CANCEL_BOOKING_REASON_"):
        booking_id = current_state.split("_")[-1]
        context.user_data["cancel_reason"] = text  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è

        ADMIN_STATE[user_id] = f"ADMIN_CANCEL_BOOKING_CONFIRM_{booking_id}"

        booking_ref = db.collection("bookings").document(booking_id)
        booking_doc = booking_ref.get()
        if booking_doc.exists:
            booking_data = booking_doc.to_dict()
            detail_text = (
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {booking_data.get('username', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}\n"
                f"üíá –ü–æ—Å–ª—É–≥–∞: {booking_data.get('service', '–ü–æ—Å–ª—É–≥–∞')}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_data.get('date', '--.--.----')}\n"
                f"‚è∞ –ß–∞—Å: {booking_data.get('time', '--:--')}\n"
                f"üíµ –¶—ñ–Ω–∞: {booking_data.get('price', 'N/A')}\n"
                f"------------------------------------\n"
                f"–ü—Ä–∏—á–∏–Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è: {text}\n"
            )
            
            # üõ† –§—ñ–∫—Å: –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∫–Ω–æ–ø–∫–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è –ü–†–ê–í–ò–õ–¨–ù–û:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"confirm_cancel_booking_yes_{booking_id}")],
                [InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"confirm_cancel_booking_no_{booking_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?\n\n{detail_text}",
                reply_markup=reply_markup
            )
            return

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –ø–æ—Å–ª—É–≥–∏
    if current_state and current_state.startswith("SERVICE_EDIT_PRICE_"):
        doc_id = current_state.split("_")[-1]
        if not text.isdigit():
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤).")
            return
        new_price = f"{text} —î–≤—Ä–æ"
        update_service_in_db(doc_id, {"price": new_price})
        ADMIN_STATE[user_id] = None
        refresh_services_cache()
        await service_details_menu(update, context, doc_id)
        return

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –ø–æ—Å–ª—É–≥–∏
    if current_state and current_state.startswith("SERVICE_EDIT_DURATION_"):
        doc_id = current_state.split("_")[-1]
        if not text.isdigit():
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (—Ö–≤–∏–ª–∏–Ω).")
            return
        new_duration = int(text)
        update_service_in_db(doc_id, {"duration": new_duration})
        ADMIN_STATE[user_id] = None
        refresh_services_cache()
        await service_details_menu(update, context, doc_id)
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–¥–º—ñ–Ω, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–Ω —É —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
    if user_id not in ADMIN_USER_IDS:
        if admin_broadcast_mode.get(user_id, False):
            await handle_broadcast_message(update, context)
        return

    # –Ø–∫—â–æ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
    if admin_broadcast_mode.get(user_id, False):
        await handle_broadcast_message(update, context)
        return

    # ====== –†–û–ó–ö–õ–ê–î (–û–¥–Ω–∞–∫–æ–≤–∏–π –Ω–∞ –≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å) ======
    if current_state == "WAITING_FOR_SAME_SCHEDULE":
        if text.lower() == "–≤–∏—Ö—ñ–¥–Ω–∏–π":
            for i in range(7):
                DEFAULT_WEEK_SCHEDULE[i]["off"] = True
                DEFAULT_WEEK_SCHEDULE[i]["start"] = "00:00"
                DEFAULT_WEEK_SCHEDULE[i]["end"] = "00:00"
            save_default_schedule_to_db()
            await update.message.reply_text("‚úÖ –£–≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–∏—Ö—ñ–¥–Ω–∏–º!")
        else:
            if validate_time_range(text):
                start, end = text.split("-")
                for i in range(7):
                    # –Ø–∫—â–æ –¥–µ–Ω—å –Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏—Ö—ñ–¥–Ω–∏–π, –æ–Ω–æ–≤–ª—é—î–º–æ –≥–æ–¥–∏–Ω–∏
                    if not DEFAULT_WEEK_SCHEDULE[i]["off"]:
                        DEFAULT_WEEK_SCHEDULE[i]["start"] = start
                        DEFAULT_WEEK_SCHEDULE[i]["end"] = end
                save_default_schedule_to_db()
                await update.message.reply_text(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ: {start}-{end} –¥–ª—è —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤!")
            else:
                    await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (09:00-18:00) –∞–±–æ '–≤–∏—Ö—ñ–¥–Ω–∏–π'.")
                    return
        ADMIN_STATE[user_id] = None
        return

    # ====== –†–û–ó–ö–õ–ê–î (–ì—Ä–∞—Ñ—ñ–∫ –ø–æ –¥–Ω—è—Ö) ======
    if current_state and current_state.startswith("DAILY_SCHEDULE_DAY_"):
        day_index = int(current_state.split("_")[-1])

        if text.lower() == "–≤–∏—Ö—ñ–¥–Ω–∏–π":
            DEFAULT_WEEK_SCHEDULE[day_index] = {
                "off": True,
                "start": "00:00",
                "end": "00:00"
            }
            message = f"‚úÖ –î–ª—è {get_weekday_name_ua(day_index)} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å."
        else:
            if validate_time_range(text):
                start, end = text.split("-")
                DEFAULT_WEEK_SCHEDULE[day_index] = {
                    "off": False,
                    "start": start,
                    "end": end
                }
                message = f"‚úÖ –î–ª—è {get_weekday_name_ua(day_index)} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–∞—Å: {start}-{end}."
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 09:00-18:00 –∞–±–æ '–≤–∏—Ö—ñ–¥–Ω–∏–π'.")
                return

        # üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ Firestore
        save_default_schedule_to_db()
        ADMIN_STATE[user_id] = "DAILY_SCHEDULE_SETUP"

        await update.message.reply_text(
            message + "\nüîÑ –†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ! –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–ª—è —ñ–Ω—à–æ–≥–æ –¥–Ω—è –∞–±–æ –≤–∏–π–¥—ñ—Ç—å –≤ –º–µ–Ω—é."
        )
        return

    # ====== –ì–†–ê–§–Ü–ö –ù–ê –ö–û–ù–ö–†–ï–¢–ù–ò–ô –ü–ï–†–Ü–û–î (–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç) ======
    if current_state == "EDIT_DATE_RANGE":
        parsed = validate_date_range_input(text)
        if not parsed:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–∫–ª–∞–¥: 12.07.2025-15.07.2025 10:00-20:00 –∞–±–æ 12.07.2025-15.07.2025 –≤–∏—Ö—ñ–¥–Ω–∏–π."
            )
            return
        

        (start_date, end_date, is_off, start_time, end_time) = parsed
        current_day = start_date
        while current_day <= end_date:
            date_str = current_day.strftime("%d.%m.%Y")
            if is_off:
                update_day_in_db(date_str, off=True, start="00:00", end="00:00")
            else:
                update_day_in_db(date_str, off=False, start=start_time, end=end_time)
            current_day += timedelta(days=1)

        await update.message.reply_text("‚úÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!")
        ADMIN_STATE[user_id] = None
        return
    
    


    # ====== –ú–ï–ù–Æ ¬´–ó–ê–ü–ò–°–ò¬ª: –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è "–ó–∞–ø–∏—Å–∏ –Ω–∞ –æ–±—Ä–∞–Ω—É –¥–∞—Ç—É" ======
    if current_state == "ADMIN_WAITING_DATE_FOR_BOOKINGS":
        date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
        if not re.match(date_pattern, text):
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–î–î.–ú–ú.–†–†–†–†).")
            return
        ADMIN_STATE[user_id] = None
        await admin_show_bookings_for_date(text, update, context)
        return

    # ====== –°–ü–û–í–Ü–©–ï–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–£ (admin_notify_booking) ======
    if current_state and current_state.startswith("ADMIN_SEND_NOTIFICATION_"):
        await process_admin_send_notification(user_id, text, context)
        ADMIN_STATE[user_id] = None
        await update.message.reply_text("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É.")
        return

    # ====== –°–ö–ê–°–£–í–ê–ù–ù–Ø –ó–ê–ü–ò–°–£ (reason) ======
    if current_state and current_state.startswith("ADMIN_CANCEL_BOOKING_REASON_"):
        await process_admin_cancel_reason(user_id, text, context)
        await update.message.reply_text("–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ —Ç–∞ –∫–ª—ñ—î–Ω—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    # ====== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ü–û–°–õ–£–ì ======
    if current_state == "SERVICE_ADD_NEW_NAME":
        context.user_data["new_service_name"] = text
        ADMIN_STATE[user_id] = "SERVICE_ADD_NEW_PRICE"
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏ (—É —î–≤—Ä–æ), –Ω–∞–ø—Ä. '500':")
        return

    if current_state == "SERVICE_ADD_NEW_PRICE":
        if not text.isdigit():
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ (—É —î–≤—Ä–æ).")
            return
        context.user_data["new_service_price"] = f"{text} —î–≤—Ä–æ"
        ADMIN_STATE[user_id] = "SERVICE_ADD_NEW_DURATION"
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ—Å–ª—É–≥–∏ —É —Ö–≤–∏–ª–∏–Ω–∞—Ö, –Ω–∞–ø—Ä. '45':")
        return

    if current_state == "SERVICE_ADD_NEW_DURATION":
        if not text.isdigit():
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö).")
            return
        duration = int(text)
        new_name = context.user_data.get("new_service_name")
        new_price = context.user_data.get("new_service_price")

        create_service_in_db(new_name, new_price, duration)

        context.user_data.pop("new_service_name", None)
        context.user_data.pop("new_service_price", None)
        ADMIN_STATE[user_id] = None
        await update.message.reply_text(
            f"–ù–æ–≤–∞ –ø–æ—Å–ª—É–≥–∞ ¬´{new_name}¬ª —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n–¶—ñ–Ω–∞: {new_price}, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} —Ö–≤."
        )
        return

    if current_state == "SERVICE_EDIT_NAME":
        doc_id = context.user_data.get("edit_service_id")
        if not doc_id:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –ø–æ—Å–ª—É–≥–∏.")
            ADMIN_STATE[user_id] = None
            return

        service_data = services_cache.get(doc_id, {})
        new_name = text
        if not new_name:
            new_name = service_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
        context.user_data["edit_service_new_name"] = new_name
        ADMIN_STATE[user_id] = "SERVICE_EDIT_PRICE"
        current_price = service_data.get("price", "0 —î–≤—Ä–æ")
        await update.message.reply_text(
            f"–û–ö. –ù–æ–≤–∞ –Ω–∞–∑–≤–∞: {new_name}\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price}\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É (—É —î–≤—Ä–æ) –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏:"
        )
        return

    if current_state == "SERVICE_EDIT_PRICE":
        doc_id = context.user_data.get("edit_service_id")
        if not doc_id:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –ø–æ—Å–ª—É–≥–∏.")
            ADMIN_STATE[user_id] = None
            return

        service_data = services_cache.get(doc_id, {})
        new_price_str = text
        if not new_price_str:
            new_price_str = service_data.get("price", "0 —î–≤—Ä–æ")
        else:
            if not new_price_str.isdigit():
                clean_str = new_price_str.replace("—î–≤—Ä–æ", "").strip()
                if clean_str.isdigit():
                    new_price_str = clean_str
                else:
                    await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏. –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. '10'")
                    return
            new_price_str = f"{new_price_str} —î–≤—Ä–æ"

        context.user_data["edit_service_new_price"] = new_price_str
        ADMIN_STATE[user_id] = "SERVICE_EDIT_DURATION"
        current_duration = service_data.get("duration", 30)
        await update.message.reply_text(
            f"–û–ö. –ù–æ–≤–∞ —Ü—ñ–Ω–∞: {new_price_str}\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {current_duration} —Ö–≤\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏:"
        )
        return

    if current_state == "SERVICE_EDIT_DURATION":
        doc_id = context.user_data.get("edit_service_id")
        if not doc_id:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –ø–æ—Å–ª—É–≥–∏.")
            ADMIN_STATE[user_id] = None
            return

        service_data = services_cache.get(doc_id, {})
        new_name = context.user_data.get("edit_service_new_name", service_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∏"))
        new_price = context.user_data.get("edit_service_new_price", service_data.get("price", "0 —î–≤—Ä–æ"))

        new_duration_str = text.strip()
        if not new_duration_str:
            new_duration = service_data.get("duration", 30)
        else:
            if not new_duration_str.isdigit():
                await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
                return
            new_duration = int(new_duration_str)

        update_service_in_db(doc_id, {
            "name": new_name,
            "price": new_price,
            "duration": new_duration
        })

        context.user_data.pop("edit_service_id", None)
        context.user_data.pop("edit_service_new_name", None)
        context.user_data.pop("edit_service_new_price", None)
        ADMIN_STATE[user_id] = None

        await update.message.reply_text(
            f"–ü–æ—Å–ª—É–≥—É –æ–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–ù–∞–∑–≤–∞: {new_name}\n–¶—ñ–Ω–∞: {new_price}\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {new_duration} —Ö–≤."
        )
        return

    if current_state == "SERVICE_CHANGE_PRICE":
        doc_id = context.user_data.get("change_price_service_id")
        if not doc_id:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –ø–æ—Å–ª—É–≥–∏.")
            ADMIN_STATE[user_id] = None
            return

        if not text.isdigit():
            clean_str = text.replace("—î–≤—Ä–æ", "").strip()
            if not clean_str.isdigit():
                await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏).")
                return
            text = clean_str

        new_price = f"{text} —î–≤—Ä–æ"
        update_service_in_db(doc_id, {"price": new_price})
        ADMIN_STATE[user_id] = None
        context.user_data.pop("change_price_service_id", None)
        await update.message.reply_text(f"–¶—ñ–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: {new_price}")
        return

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –∑ –∞–¥–º—ñ–Ω-—Å—Ç–∞–Ω—ñ–≤ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ ‚Äî –º–æ–∂–ª–∏–≤–æ, —Ä–æ–∑—Å–∏–ª–∫–∞?
    await handle_broadcast_message(update, context)
    
async def send_all_records_in_txt(query: CallbackQuery, context: CallbackContext):
    # 1) –ó–±–∏—Ä–∞—î–º–æ –í–°–Ü –∑–∞–ø–∏—Å–∏
    all_bookings = db.collection("bookings").stream()
    records = []
    for doc in all_bookings:
        data = doc.to_dict()
        records.append(data)

    # 2) –§–æ—Ä–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Ç–µ–∫—Å—Ç–æ–≤–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    txt_content = "ID".ljust(15) + "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á".ljust(20) + "–ü–æ—Å–ª—É–≥–∞".ljust(25) + "–î–∞—Ç–∞".ljust(15) + "–ß–∞—Å".ljust(10) + "–¶—ñ–Ω–∞".ljust(10) + "–°—Ç–∞—Ç—É—Å\n"
    txt_content += "=" * 100 + "\n"  # –õ—ñ–Ω—ñ—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è

    # 3) –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–∫–∏ —É —Ç–∞–±–ª–∏—Ü—é
    for b in records:
        rec_id = b.get("booking_id", "<no_id>").ljust(15)
        username = b.get("username", "<no_user>").ljust(20)
        service = b.get("service", "<no_service>").ljust(25)
        date_ = b.get("date", "--.--.----").ljust(15)
        time_ = b.get("time", "--:--").ljust(10)
        price = str(b.get("price", "0")).ljust(10)
        status = b.get("status", "unknown")

        txt_content += f"{rec_id}{username}{service}{date_}{time_}{price}{status}\n"

    # 4) –ó–∞–ø–∏—Å—É—î–º–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
    file_name = "all_bookings.txt"
    with open(file_name, "w", encoding="utf-8") as f:
        f.write(txt_content)

    # 5) –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç:
    try:
        await context.bot.send_document(
            chat_id=query.message.chat_id,
            document=open(file_name, "rb"),
            filename=file_name,
            caption="–û—Å—å –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ TXT"
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ TXT-—Ñ–∞–π–ª: {e}")

    # 6) –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
    if os.path.exists(file_name):
        os.remove(file_name)
    # –ü–æ–≤–µ—Ä–Ω–µ–º–æ—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏):
    # await context.bot.send_message(chat_id=query.message.chat_id, text="–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é...")
from fpdf import FPDF
import os
import time

async def send_filtered_records_pdf(update, context, status_filter):
    CACHE_FILE = f"bookings_{status_filter}.pdf"
    CACHE_DURATION = 600  # 10 —Ö–≤–∏–ª–∏–Ω

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ chat_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    chat_id = None
    if update.message and update.message.chat_id:
        chat_id = update.message.chat_id
    elif update.callback_query and update.callback_query.message:
        chat_id = update.callback_query.message.chat_id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–æ chat_id
    if chat_id is None:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ chat_id, PDF –Ω–µ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return  # –í–∏—Ö—ñ–¥ —ñ–∑ —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ —Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω
    if os.path.exists(CACHE_FILE) and (time.time() - os.path.getmtime(CACHE_FILE)) < CACHE_DURATION:
        try:
            await context.bot.send_document(
                chat_id=chat_id,
                document=open(CACHE_FILE, "rb"),
                filename=CACHE_FILE,
                caption=f"–û—Å—å –≤—Å—ñ {status_filter} –∑–∞–ø–∏—Å–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF (–∫–µ—à–æ–≤–∞–Ω–æ)"
            )
            return
        except Exception as e:
            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–µ—à–æ–≤–∞–Ω–∏–π PDF: {e}")

    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Å–∏ –∑ Firestore
    all_bookings = db.collection("bookings").where("status", "==", status_filter).stream()
    records = [doc.to_dict() for doc in all_bookings]

    if not records:
        await context.bot.send_message(chat_id, f"‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º {status_filter}.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF
    pdf = FPDF()
    pdf.add_page()

    # –í–∫–∞–∑—É—î–º–æ —à–ª—è—Ö –¥–æ —à—Ä–∏—Ñ—Ç—É
    font_path = r"C:\Users\reset\OneDrive\–†–æ–±–æ—á–∏–π —Å—Ç—ñ–ª\vps server\dejavu-fonts-ttf-2.37\ttf\DejaVuSansCondensed.ttf"
    if not os.path.exists(font_path):
        logger.error(f"‚ö†Ô∏è –®—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {font_path}")
        await context.bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –î–æ–¥–∞—î–º–æ —à—Ä–∏—Ñ—Ç
    pdf.add_font("DejaVu", "", font_path, uni=True)
    pdf.set_font("DejaVu", "", 10)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.cell(0, 10, f"–ó–∞–ø–∏—Å–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: {status_filter}", ln=True, align="C")
    pdf.ln(5)

    # –¢–∞–±–ª–∏—Ü—è
    headers = ["–Ü–º'—è", "–ü–æ—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–ß–∞—Å", "–¶—ñ–Ω–∞"]
    col_widths = [40, 50, 25, 20, 20]

    pdf.set_font("DejaVu", "", 9)
    for i, header in enumerate(headers):
        pdf.cell(col_widths[i], 8, header, border=1, align="C")
    pdf.ln()

    # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
    for b in records:
        row = [
            str(b.get("username", "-")),
            str(b.get("service", "-")),
            str(b.get("date", "--.--.----")),
            str(b.get("time", "--:--")),
            str(b.get("price", "-"))
        ]
        for i, item in enumerate(row):
            pdf.cell(col_widths[i], 8, item, border=1, align="C")
        pdf.ln()

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è PDF
    pdf.output(CACHE_FILE, "F")

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É Telegram
    try:
        await context.bot.send_document(
            chat_id=chat_id,
            document=open(CACHE_FILE, "rb"),
            filename=CACHE_FILE,
            caption=f"–û—Å—å –≤—Å—ñ {status_filter} –∑–∞–ø–∏—Å–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF"
        )
    except Exception as e:
        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ PDF: {e}")
        
        

    
# 1. –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é "–ö–ª—ñ—î–Ω—Ç–∏"
async def show_client_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞", callback_data="client_search")],
        [InlineKeyboardButton("üìñ –ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–∑–∏—Ç—ñ–≤", callback_data="client_history_menu")],
        [InlineKeyboardButton("üö´ –î–æ–¥–∞—Ç–∏ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É", callback_data="client_blacklist_menu")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –ì–æ–ª–æ–≤–Ω–æ–≥–æ –ú–µ–Ω—é", callback_data="back_to_main_menu_text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("üë§ –ú–µ–Ω—é –∫–ª—ñ—î–Ω—Ç—ñ–≤:", reply_markup=reply_markup)
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, "üë§ –ú–µ–Ω—é –∫–ª—ñ—î–Ω—Ç—ñ–≤:", reply_markup=reply_markup)

# 2. –§—É–Ω–∫—Ü—ñ—ó-–ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ—à—É–∫—É, —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
async def client_search_prompt(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    ADMIN_STATE[user_id] = "CLIENT_SEARCH_INPUT"
    if update.message:
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É:")
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, "üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ø–æ—à—É–∫—É:")

async def client_history_prompt(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    ADMIN_STATE[user_id] = "CLIENT_HISTORY_INPUT"
    if update.message:
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–∑–∏—Ç—ñ–≤:")
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, "üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–∑–∏—Ç—ñ–≤:")

async def client_blacklist_prompt(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    ADMIN_STATE[user_id] = "CLIENT_BLACKLIST_INPUT"
    if update.message:
        await update.message.reply_text("üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É:")
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, "üîé –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É:")

# 3. –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É –¥–ª—è –ø–æ—à—É–∫—É/—ñ—Å—Ç–æ—Ä—ñ—ó/—á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
async def handle_client_text_states(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    current_state = ADMIN_STATE.get(user_id)

    # 3.1 –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞
    if current_state == "CLIENT_SEARCH_INPUT":
        query_text = text.lower()
        users = list(db.collection("users").stream())
        matched_users = []
        for doc in users:
            data = doc.to_dict()
            fields = []
            if "username" in data:
                fields.append(data["username"])
            if "first_name" in data:
                fields.append(data["first_name"])
            if "last_name" in data:
                fields.append(data["last_name"])
            if "phone" in data:
                fields.append(data["phone"])
            combined = " ".join(x for x in fields if x is not None).lower()
            if query_text in combined:
                matched_users.append((doc.id, data))
        if not matched_users:
            await update.message.reply_text("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            # –ù–ï —Å–∫–∏–¥–∞–π—Ç–µ —Å—Ç–∞–Ω –ø–æ—à—É–∫—É ‚Äì –∑–∞–ª–∏—à—Ç–µ –π–æ–≥–æ, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç
            return
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
        context.user_data["last_search_results"] = matched_users

        keyboard = []
        for idx, (client_id, data) in enumerate(matched_users, start=1):
            display_name = data.get("username") or (data.get("first_name", "") + " " + data.get("last_name", ""))
            phone = data.get("phone", "–ù–µ–º–∞—î")
            if data.get("blacklisted", False):
                display_name = "‚ö†Ô∏è " + display_name
            btn_text = f"{idx}. {display_name} ‚Äî {phone}"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"client_details_{client_id}")])
        # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="client_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üë• –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏:", reply_markup=reply_markup)
        ADMIN_STATE[user_id] = None
        return

    # 3.2 –ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞
    if current_state == "CLIENT_HISTORY_INPUT":
        query_text = text.lower()
        users = list(db.collection("users").stream())
        matched_users = []

        for doc in users:
            data = doc.to_dict()
            fields = []
            if "username" in data:
                fields.append(data["username"])
            if "first_name" in data:
                fields.append(data["first_name"])
            if "last_name" in data:
                fields.append(data["last_name"])
            if "phone" in data:
                fields.append(data["phone"])
            combined = " ".join(x for x in fields if x).lower()

            if query_text in combined:
                matched_users.append((doc.id, data))

        if not matched_users:
            await update.message.reply_text("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            # –í–ê–ñ–õ–ò–í–û: –Ω–µ —Å–∫–∏–¥–∞—î–º–æ ADMIN_STATE[user_id], —â–æ–±–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –∑–Ω–æ–≤—É –≤–≤–µ—Å—Ç–∏
            return

        # –Ø–∫—â–æ –º–∏ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ ‚Äì —î –∑–±—ñ–≥–∏, –º–æ–∂–Ω–∞ —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞–Ω, —â–æ–± –ø–æ—à—É–∫ –±—ñ–ª—å—à–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–≤—Å—è
        ADMIN_STATE[user_id] = None

        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        keyboard = []
        for idx, (client_id, data) in enumerate(matched_users, start=1):
            display_name = data.get("username") or (data.get("first_name", "") + " " + data.get("last_name", ""))
            phone = data.get("phone", "–ù–µ–º–∞—î")
            if data.get("blacklisted", False):
                display_name = "‚ö†Ô∏è " + display_name
            btn_text = f"{idx}. {display_name} ‚Äî {phone}"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"client_history_{client_id}")])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="client_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üë• –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó:", reply_markup=reply_markup)


    # 3.3 –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    if current_state == "CLIENT_BLACKLIST_INPUT":
        query_text = text.lower()
        users = list(db.collection("users").stream())
        matched_users = []
        for doc in users:
            data = doc.to_dict()
            fields = []
            if "username" in data:
                fields.append(data["username"])
            if "first_name" in data:
                fields.append(data["first_name"])
            if "last_name" in data:
                fields.append(data["last_name"])
            if "phone" in data:
                fields.append(data["phone"])
            combined = " ".join(x for x in fields if x is not None).lower()
            if query_text in combined:
                matched_users.append((doc.id, data))
        if not matched_users:
            await update.message.reply_text("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        # ... –¥–∞–ª—ñ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
        keyboard = []
        for idx, (client_id, data) in enumerate(matched_users, start=1):
            display_name = data.get("username") or (data.get("first_name", "") + " " + data.get("last_name", ""))
            phone = data.get("phone", "–ù–µ–º–∞—î")
            if data.get("blacklisted", False):
                display_name = "‚ö†Ô∏è " + display_name
            btn_text = f"{idx}. {display_name} ‚Äî {phone}"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"client_blacklist_details_{client_id}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="client_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üë• –ó–Ω–∞–π–¥–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É:", reply_markup=reply_markup)
        ADMIN_STATE[user_id] = None
        return


# 4. –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫–ª—ñ—î–Ω—Ç–∞ –∑ –º–µ–Ω—é
async def client_details(update: Update, context: CallbackContext, client_id: str):
    doc_ref = db.collection("users").document(client_id)
    doc = doc_ref.get()
    if not doc.exists:
        await safe_edit_message_text(update.callback_query, "–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    data = doc.to_dict()
    display_name = data.get("username") or (data.get("first_name", "") + " " + data.get("last_name", ""))
    phone = data.get("phone", "–ù–µ–º–∞—î")
    blacklisted = data.get("blacklisted", False)
    
    message = f"–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞:\n\n–Ü–º'—è: {display_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    
    keyboard = [
        [InlineKeyboardButton("üìñ –ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó", callback_data=f"client_history_{client_id}")]
    ]
    if blacklisted:
        keyboard.append([InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É", callback_data=f"client_blacklist_remove_{client_id}")])
    else:
        keyboard.append([InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É", callback_data=f"client_blacklist_confirm_{client_id}")])
    
    # –Ø–∫—â–æ –≤ context.user_data –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –Ω–∏—Ö, —ñ–Ω–∞–∫—à–µ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    back_callback = "client_search_results" if context.user_data.get("last_search_results") else "client_menu"
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(update.callback_query, message, reply_markup=reply_markup)

async def show_client_search_results(update: Update, context: CallbackContext):
    query = update.callback_query
    results = context.user_data.get("last_search_results")
    if not results:
        await query.edit_message_text("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –ø–æ—à—É–∫ –∑–Ω–æ–≤—É.")
        ADMIN_STATE[update.effective_user.id] = "CLIENT_SEARCH_INPUT"
        return
    
    doc = db.collection("bookings").document(rec_id).get()
    if not doc.exists:
        logger.warning(f"Booking document not found: {rec_id}")
        await safe_edit_message_text(query, "–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return


    keyboard = []
    for idx, (client_id, data) in enumerate(results, start=1):
        display_name = data.get("username") or (data.get("first_name", "") + " " + data.get("last_name", ""))
        phone = data.get("phone", "–ù–µ–º–∞—î")
        if data.get("blacklisted", False):
            display_name = "‚ö†Ô∏è " + display_name
        btn_text = f"{idx}. {display_name} ‚Äî {phone}"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"client_details_{client_id}")])
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥", —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–ª—ñ—î–Ω—Ç—ñ–≤
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="client_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text("üë• –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:", reply_markup=reply_markup, parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        await query.message.reply_text("üë• –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:", reply_markup=reply_markup, parse_mode="MarkdownV2")

# 5. –ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–∑–∏—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç–∞
async def client_history_details(update: Update, context: CallbackContext, client_id: str):
    doc_ref = db.collection("users").document(client_id)
    doc = doc_ref.get()
    if not doc.exists:
        await safe_edit_message_text(update.callback_query, "–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    client_data = doc.to_dict()
    display_name = client_data.get("username") or (client_data.get("first_name", "") + " " + client_data.get("last_name", ""))
    user_id_val = client_data.get("user_id")
    bookings = []
    for booking in db.collection("bookings").where("user_id", "==", user_id_val).stream():
        bookings.append(booking.to_dict())
    if not bookings:
        message = f"‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–∑–∏—Ç—ñ–≤ –¥–ª—è {display_name} –≤—ñ–¥—Å—É—Ç–Ω—è."
    else:
        message = f"üìñ –Ü—Å—Ç–æ—Ä—ñ—è –≤—ñ–∑–∏—Ç—ñ–≤ {display_name}:\n"
        total_visits = 0
        total_spent = 0
        for b in bookings:
            message += f"‚úÖ {b.get('date', '??.??.????')} ‚Äî {b.get('service', '–ü–æ—Å–ª—É–≥–∞')}\n"
            total_visits += 1
            price_str = str(b.get("price", "0"))
            price_num = ''.join(filter(str.isdigit, price_str))
            try:
                total_spent += int(price_num)
            except:
                pass
        message += f"\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–∑–∏—Ç—ñ–≤: {total_visits}\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç: {total_spent} –≥—Ä–Ω"
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="client_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(update.callback_query, message, reply_markup=reply_markup)

    

# 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
async def client_blacklist_details(update: Update, context: CallbackContext, client_id: str):
    doc_ref = db.collection("users").document(client_id)
    doc = doc_ref.get()
    if not doc.exists:
        await safe_edit_message_text(update.callback_query, "–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    data = doc.to_dict()
    display_name = data.get("username") or (data.get("first_name", "") + " " + data.get("last_name", ""))
    phone = data.get("phone", "–ù–µ–º–∞—î")
    blacklisted = data.get("blacklisted", False)
    message = f"–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞:\n\n–Ü–º'—è: {display_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    if blacklisted:
        keyboard = [
            [InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É", callback_data=f"client_blacklist_remove_{client_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="client_menu")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"client_blacklist_confirm_{client_id}"),
             InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"client_blacklist_cancel_{client_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="client_menu")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await safe_edit_message_text(update.callback_query, message, reply_markup=reply_markup)

# 7. Callback –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
async def handle_client_blacklist_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–ª—ñ—î–Ω—Ç–∞ –∑ callback_data (–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç)
    client_id = data.split("_")[-1]
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞
    doc_ref = db.collection("users").document(client_id)
    doc = doc_ref.get()
    if not doc.exists:
        await safe_edit_message_text(query, "–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    client_data = doc.to_dict()
    display_name = client_data.get("username") or (client_data.get("first_name", "") + " " + client_data.get("last_name", ""))
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    if data.startswith("client_blacklist_confirm_") and not data.startswith("client_blacklist_confirm_yes_"):
        message = f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ {display_name} –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É?"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"client_blacklist_confirm_yes_{client_id}"),
             InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"client_blacklist_confirm_no_{client_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message_text(query, message, reply_markup=reply_markup)
        return

    if data.startswith("client_blacklist_confirm_yes_"):
        doc_ref.update({"blacklisted": True})
        try:
            await query.message.delete()
        except Exception as e:
            logger.error(f"Error deleting confirmation message: {e}")
        detail_message = f"{display_name} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"client_details_{client_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=query.message.chat_id, text=detail_message, reply_markup=reply_markup)
        return
    
    if data.startswith("client_blacklist_confirm_no_"):
        client_id = data.split("_")[-1]
        try:
            await query.message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        except Exception as e:
            logger.error(f"Error deleting message: {e}")
        # –ù–µ–≥–∞–π–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –¥–µ—Ç–∞–ª–µ–π –∫–ª—ñ—î–Ω—Ç–∞
        await client_details(update, context, client_id)
    


        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –¥–æ –¥–µ—Ç–∞–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"client_details_{client_id}")]
            ])
        )
        return

# –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    if data.startswith("client_blacklist_remove_") and not data.startswith("client_blacklist_remove_yes_"):
        message = f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ {display_name} –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É?"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"client_blacklist_remove_yes_{client_id}"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"client_blacklist_remove_no_{client_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message_text(query, message, reply_markup=reply_markup)
        return


    if data.startswith("client_blacklist_remove_yes_"):
        doc_ref.update({"blacklisted": False})
        try:
            await query.message.delete()
        except Exception as e:
            logger.error(f"Error deleting confirmation message: {e}")
        detail_message = f"{display_name} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"client_details_{client_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=query.message.chat_id, text=detail_message, reply_markup=reply_markup)
        return

    if data.startswith("client_blacklist_remove_no_"):
        client_id = data.split("_")[-1]
        try:
            await query.message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
        except Exception as e:
            logger.error(f"Error deleting confirmation message: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"client_details_{client_id}")]
            ])
        )
        return

        
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    if data.startswith("client_blacklist_remove_") and not data.startswith("client_blacklist_remove_yes_"):
        message = f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ {display_name} –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É?"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=f"client_blacklist_remove_yes_{client_id}"),
             InlineKeyboardButton("‚ùå –ù—ñ", callback_data=f"client_blacklist_remove_no_{client_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_message_text(query, message, reply_markup=reply_markup)
        return

    if data.startswith("client_blacklist_remove_yes_"):
        doc_ref.update({"blacklisted": False})
        try:
            await query.message.delete()
        except Exception as e:
            logger.error(f"Error deleting confirmation message: {e}")
        detail_message = f"{display_name} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"client_details_{client_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=query.message.chat_id, text=detail_message, reply_markup=reply_markup)
        return

    if data.startswith("client_blacklist_remove_no_"):
        client_id = data.split("_")[-1]
        try:
            await query.message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
        except Exception as e:
            logger.error(f"Error deleting confirmation message: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"client_details_{client_id}")]
            ])
        )
        return

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=cancel_message,
            reply_markup=reply_markup
        )
        return


# ========= –†–û–ó–°–ò–õ–ö–ê =========
async def handle_broadcast_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in ADMIN_USER_IDS and admin_broadcast_mode.get(user_id, False):
        broadcast_text = update.message.text

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        context.user_data["broadcast_message"] = broadcast_text
        ADMIN_STATE[user_id] = "BROADCAST_CONFIRM"

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_broadcast_yes"),
                InlineKeyboardButton("‚ùå –ù—ñ", callback_data="confirm_broadcast_no")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –º–æ–∂–Ω–∞ —Ä–æ–∑—Å–∏–ª–∞—Ç–∏:\n\n{broadcast_text}",
            reply_markup=reply_markup
        )
        
        # ------------------ –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ------------------

def parse_date_range(text: str):
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ä—è–¥–æ–∫ –∑–∞ –¥–µ—Ñ—ñ—Å–æ–º, –¥–æ–ø—É—Å–∫–∞—é—á–∏ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ –Ω—å–æ–≥–æ
    parts = re.split(r'\s*-\s*', text)
    if len(parts) != 2:
        return None
    try:
        start_date = datetime.strptime(parts[0].strip(), "%d.%m.%Y").date()
        end_date = datetime.strptime(parts[1].strip(), "%d.%m.%Y").date()
        return start_date, end_date
    except Exception:
        return None


# –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äì –¥–æ–¥–∞–Ω–æ –æ–∫—Ä–µ–º—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –∫–æ–∂–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
async def show_statistics_menu(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤", callback_data="stat_count")],
        [InlineKeyboardButton("üìå –¢–æ–ø –ø–æ—Å–ª—É–≥", callback_data="stat_top")],
        [InlineKeyboardButton("üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫", callback_data="stat_avg")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç:", reply_markup=reply_markup)
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, "–í–∏–±–µ—Ä—ñ—Ç—å –∑–≤—ñ—Ç:", reply_markup=reply_markup)


# –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ Custom
    if data == "stat_top_custom":
        ADMIN_STATE[user_id] = "STAT_TOP_INPUT"
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–¢–û–ü –ø–æ—Å–ª—É–≥* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`",
            parse_mode="MarkdownV2"
        )
        return
    
    if data == "stat_count_custom":
        ADMIN_STATE[user_id] = "STAT_COUNT_INPUT"
        await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`", parse_mode="MarkdownV2")
        return

    if data == "stat_avg_custom":
        ADMIN_STATE[user_id] = "STAT_AVG_INPUT"
        await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`", parse_mode="MarkdownV2")
        return


    if data == "stat_top_custom":
        # 1) –°—Ç–∞–≤–∏–º–æ —Å—Ç–∞–Ω, —â–æ–± –±–æ—Ç —á–µ–∫–∞–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É
        ADMIN_STATE[user_id] = "STAT_TOP_INPUT"
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–¢–û–ü –ø–æ—Å–ª—É–≥* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`",
            parse_mode="MarkdownV2"
        )
        return


async def statistics_callback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    

    if data == "stat_menu":
        await show_statistics_menu(update, context)
        return
    if data == "stat_count":
        # –ü–æ–∫–∞–∑ preset-–ø–µ—Ä—ñ–æ–¥—ñ–≤ –¥–ª—è "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤"
        await show_count_periods(update, context)
        return
    if data == "stat_avg":
        # –ü–æ–∫–∞–∑ preset-–ø–µ—Ä—ñ–æ–¥—ñ–≤ –¥–ª—è "–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫"
        await show_avg_periods(update, context)
        return
    if data == "stat_top":
        await show_top_services_periods(update, context)
        return

    # –û–±—Ä–æ–±–∫–∞ Custom –¥–ª—è –¢–û–ü –ø–æ—Å–ª—É–≥, –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —Ç–∞ –°–µ—Ä–µ–¥–Ω—å–æ–≥–æ —á–µ–∫—É:
    if data == "stat_top_custom":
        ADMIN_STATE[user_id] = "STAT_TOP_INPUT"
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–¢–û–ü –ø–æ—Å–ª—É–≥* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`",
            parse_mode="MarkdownV2"
        )
        return

    if data == "stat_count_custom":
        ADMIN_STATE[user_id] = "STAT_COUNT_INPUT"
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`",
            parse_mode="MarkdownV2"
        )
        return

    if data == "stat_avg_custom":
        ADMIN_STATE[user_id] = "STAT_AVG_INPUT"
        await safe_edit_message_text(
            query,
            "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`",
            parse_mode="MarkdownV2"
        )
        return

    # –û–±—Ä–æ–±–∫–∞ preset-–ø–µ—Ä—ñ–æ–¥—ñ–≤:
    if data.startswith("stat_top_"):
        try:
            days = int(data.split("_")[-1])
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=days)
            await process_stat_top_input_with_dates(update, context, start_date, end_date)
            return
        except ValueError:
            await query.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É.")
            return

    if data.startswith("stat_count_"):
        try:
            days = int(data.split("_")[-1])
        except ValueError:
            await query.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É.")
            return
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=days)
        await process_stat_count_input_with_dates(update, context, start_date, end_date)
        return

    if data.startswith("stat_avg_"):
        try:
            days = int(data.split("_")[-1])
        except ValueError:
            await query.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É.")
            return
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=days)
        await process_stat_avg_input_with_dates(update, context, start_date, end_date)
        return
    
    # ============ –ü–ê–ì–Ü–ù–ê–¶–Ü–Ø –ó–ê–ü–ò–°–Ü–í (–û–°–ù–û–í–ù–ê –ó–ú–Ü–ù–ê!) ============
    # (// CHANGE) –¢—É—Ç –Ω–µ –∑–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –ë–î, –∞ –±–µ—Ä–µ–º–æ —Ä–∞–Ω—ñ—à–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫
    # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ ¬´–©–µ –∑–∞–ø–∏—Å–∏¬ª / ¬´–ü–æ–ø–µ—Ä–µ–¥–Ω—è¬ª
    if data.startswith("records_page_"):
        try:
            _, page_and_return = data.split("records_page_", 1)
            page_str, return_callback = page_and_return.split("|", 1)
            page = int(page_str)
        except ValueError:
            await query.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤, —è–∫–∏–π –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
        records = context.user_data.get("current_records", [])

        if not records:
            await query.answer("‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
            return

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        await display_records_list(update, context, records, return_callback, page=page, page_size=10)



    # –Ø–∫—â–æ —ñ–Ω—à—ñ –∫–æ–ª–±–µ–∫–∏ ‚Äì –¥–æ–¥–∞–π—Ç–µ —Ç—É—Ç

    await query.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π callback_data!")

    if data.startswith("record_details_"):
        await view_record_details(update, context)
        return

    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if data == "admin_records_confirmed":
        records = await get_admin_records_cached(context, "confirmed", past=False)
        await display_records_list(update, context, records, "admin_bookings_menu")
        return

    if data == "admin_records_rejected":
        records = await get_admin_records_cached(context, "rejected", past=False)
        await display_records_list(update, context, records, "admin_bookings_menu")
        return

    if data == "admin_records_past":
        records = await get_admin_records_cached(context, "confirmed", past=True)
        await display_records_list(update, context, records, "admin_bookings_menu")
        return
    # –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
    if data == "client_records_confirmed":
        records = await get_client_records_cached(context, user_id, "confirmed", past=False)
        await display_records_list(update, context, records, "client_menu", page=0, page_size=10)
        return
    if data == "client_records_pending":
        records = await get_client_records_cached(context, user_id, "pending", past=False)
        await display_records_list(update, context, records, "client_menu", page=0, page_size=10)
        return
    if data == "client_records_past":
        records = await get_client_records_cached(context, user_id, "confirmed", past=True)
        await display_records_list(update, context, records, "client_menu", page=0, page_size=10)
        return

    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø–∏—Å—É
    if data.startswith("record_details_"):
        await view_record_details(update, context)
        return

    # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ "–ó–∞ –¥–∞—Ç–æ—é" (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)
    if data == "admin_pick_date_for_bookings":
        ADMIN_STATE[user_id] = "ADMIN_WAITING_DATE_FOR_RECORDS"
        await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–ø–∏—Å—ñ–≤:")
        return

    # –û–±—Ä–æ–±–∫–∞ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (callback —Ç–µ–∫—Å—Ç–æ–º)
    if data.startswith("admin_show_records_for_date_"):
        # –§–æ—Ä–º–∞—Ç callback: "admin_show_records_for_date_{date}"
        date_str = data.split("_")[-1]
        records = await get_admin_records("confirmed", past=False)
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é:
        filtered = [(rid, rec) for rid, rec in records if rec.get("date") == date_str]
        await display_records_list(update, context, filtered, "admin_bookings_menu")
        return

    # –ö–Ω–æ–ø–∫–∞ "–ù–ê–ó–ê–î" –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑–∞–ø–∏—Å—ñ–≤
    if data in ["back_to_records_menu"]:
        await show_records_menu(update, context)
        return

    # –Ø–∫—â–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∂–æ–¥–Ω–∞ —É–º–æ–≤–∞ ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    # –î–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥–∞—Ç–∏ –∑–∞–ø–∏—Å—ñ–≤
async def handle_admin_records_text(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()
    current_state = ADMIN_STATE.get(user_id)
    if current_state == "ADMIN_WAITING_DATE_FOR_RECORDS":
        # –û—á—ñ–∫—É—î–º–æ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†
        date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
        if not re.match(date_pattern, text):
            await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–î–î.–ú–ú.–†–†–†–†).")
            return
        ADMIN_STATE[user_id] = None
        records = await get_admin_records("confirmed", past=False)
        filtered = [(rid, rec) for rid, rec in records if rec.get("date") == text]
        await display_records_list(update, context, filtered, "admin_bookings_menu")
        return
    


    # –û–±—Ä–æ–±–∫–∞ Custom –¥–ª—è "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤"
    if data == "stat_count_custom":
        ADMIN_STATE[user_id] = "STAT_COUNT_INPUT"
        await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`", parse_mode="MarkdownV2")
        return

    # –û–±—Ä–æ–±–∫–∞ Custom –¥–ª—è "–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫"
    if data == "stat_avg_custom":
        ADMIN_STATE[user_id] = "STAT_AVG_INPUT"
        await safe_edit_message_text(query, "–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É *–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫* —É —Ñ–æ—Ä–º–∞—Ç—ñ `DD.MM.YYYY-DD.MM.YYYY`", parse_mode="MarkdownV2")
        return


async def process_stat_count_input_with_dates(update: Update, context: CallbackContext, start_date: datetime.date, end_date: datetime.date):
    all_bookings = [doc.to_dict() for doc in db.collection("bookings").stream()]
    count_confirmed = 0
    count_canceled = 0
    user_min_date = {}
    for booking in all_bookings:
        try:
            b_date = datetime.strptime(booking.get("date", ""), "%d.%m.%Y").date()
        except Exception:
            continue
        if start_date <= b_date <= end_date:
            status = booking.get("status", "").lower()
            if status == "confirmed":
                count_confirmed += 1
            if status in ["canceled", "rejected"]:
                count_canceled += 1
            uid = booking.get("user_id")
            if uid:
                if uid in user_min_date:
                    if b_date < user_min_date[uid]:
                        user_min_date[uid] = b_date
                else:
                    user_min_date[uid] = b_date
    new_clients = sum(1 for uid, min_date in user_min_date.items() if min_date >= start_date)

    message = (
        f"üìÖ *–ó–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥* {start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}\n\n"
        f"üîπ *–ó–∞–ø–∏—Å–∏:* {count_confirmed}\n"
        f"‚ùå *–°–∫–∞—Å–æ–≤–∞–Ω—ñ –≤—ñ–∑–∏—Ç–∏:* {count_canceled}\n"
        f"üÜï *–ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏:* {new_clients}"
    )
    message_escaped = escape_markdown(message, version=2)
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stat_menu")],
        [InlineKeyboardButton("üìÜ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥", callback_data="stat_count")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(message_escaped, reply_markup=reply_markup, parse_mode="MarkdownV2")
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, message_escaped, reply_markup=reply_markup, parse_mode="MarkdownV2")


async def process_stat_avg_input_with_dates(update: Update, context: CallbackContext, start_date: datetime.date, end_date: datetime.date):
    all_bookings = [doc.to_dict() for doc in db.collection("bookings").stream()]
    total_revenue = 0
    count = 0
    for booking in all_bookings:
        try:
            b_date = datetime.strptime(booking.get("date", ""), "%d.%m.%Y").date()
        except Exception:
            continue
        if start_date <= b_date <= end_date and booking.get("status", "").lower() == "confirmed":
            price_str = booking.get("price", "0")
            digits = "".join(ch for ch in price_str if ch.isdigit())
            if digits:
                total_revenue += int(digits)
                count += 1
    avg = total_revenue / count if count > 0 else 0

    message = (
        f"üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫ –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}:\n\n"
        f"üìä –î–æ—Ö—ñ–¥: {total_revenue} —î–≤—Ä–æ\n"
        f"üìù –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {count}\n"
        f"üìà –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg:.2f} —î–≤—Ä–æ"
    )
    message_escaped = escape_markdown(message, version=2)
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stat_menu")],
        [InlineKeyboardButton("üìÜ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥", callback_data="stat_avg")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(message_escaped, reply_markup=reply_markup, parse_mode="MarkdownV2")
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, message_escaped, reply_markup=reply_markup, parse_mode="MarkdownV2")


async def process_stat_top_input_with_dates(update: Update, context: CallbackContext, start_date: datetime.date, end_date: datetime.date):
    all_bookings = [doc.to_dict() for doc in db.collection("bookings").stream()]
    service_counts = {}
    for booking in all_bookings:
        try:
            b_date = datetime.strptime(booking.get("date", ""), "%d.%m.%Y").date()
        except Exception:
            continue
        if start_date <= b_date <= end_date and booking.get("status", "").lower() == "confirmed":
            service_name = booking.get("service", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ—Å–ª—É–≥–∞")
            service_counts[service_name] = service_counts.get(service_name, 0) + 1

    top_services = sorted(service_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    message = f"üèÜ *–¢–û–ü –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–æ—Å–ª—É–≥* –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}:\n\n"
    if not top_services:
        message += "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö."
    else:
        rank_emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]
        for i, (service, cnt) in enumerate(top_services):
            message += f"{rank_emojis[i]} {service} ‚Äì {cnt} –∑–∞–ø–∏—Å—ñ–≤\n"

    # –ï–∫—Ä–∞–Ω—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è MarkdownV2
    message_escaped = escape_markdown(message, version=2)
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stat_menu")],
        [InlineKeyboardButton("üìÜ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥", callback_data="stat_top")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(message_escaped, reply_markup=reply_markup, parse_mode="MarkdownV2")
    elif update.callback_query:
        await safe_edit_message_text(update.callback_query, message_escaped, reply_markup=reply_markup, parse_mode="MarkdownV2")


async def process_stat_avg_input(update: Update, context: CallbackContext):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –¥–ª—è –∑–≤—ñ—Ç—É "–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫". –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î confirmed –∑–∞–ø–∏—Å–∏, —Å—É–º—É—î –¥–æ—Ö–æ–¥,
    –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ –æ–±—á–∏—Å–ª—é—î —Å–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫.
    """
    text_input = update.message.text.strip()
    period = parse_date_range(text_input)
    if not period:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ DD.MM.YYYY-DD.MM.YYYY.")
        return
    start_date, end_date = period

    all_bookings = [doc.to_dict() for doc in db.collection("bookings").stream()]
    total_revenue = 0
    count = 0
    for booking in all_bookings:
        try:
            b_date = datetime.strptime(booking.get("date", ""), "%d.%m.%Y").date()
        except Exception:
            continue
        if start_date <= b_date <= end_date and booking.get("status", "").lower() == "confirmed":
            price_str = booking.get("price", "0")
            digits = "".join(ch for ch in price_str if ch.isdigit())
            if digits:
                total_revenue += int(digits)
                count += 1

    avg = total_revenue / count if count > 0 else 0
    message = (
        f"üí∞ *–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫* –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}:\n\n"
        f"üìä *–î–æ—Ö—ñ–¥:* {total_revenue} —î–≤—Ä–æ\n"
        f"üìù *–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤:* {count}\n"
        f"üìà *–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫:* {avg:.2f} —î–≤—Ä–æ"
    )
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="stat_menu")],
        [InlineKeyboardButton("üìÜ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø–µ—Ä—ñ–æ–¥", callback_data="stat_avg")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="MarkdownV2")


# ========= –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó–ê–ü–£–°–ö–£ –ë–û–¢–ê =========
def main():
    # 1) –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∑ –ë–î (–∞–±–æ —Å—Ç–≤–æ—Ä–∏–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î)
    load_default_schedule_from_db()
    # 2) –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ —Å–ª–æ—Ç–∏
    load_booked_slots()
    # 3) –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ (–æ–±–Ω–æ–≤–∏–º–æ) –∫–µ—à –ø–æ—Å–ª—É–≥
    refresh_services_cache()
    
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å, —Ä–æ–∑–∫–ª–∞–¥—É, –±—Ä–æ–Ω—é–≤–∞–Ω—å, –∫–µ—à—É –ø–æ—Å–ª—É–≥
    load_default_schedule_from_db()
    load_booked_slots()
    refresh_services_cache()
    
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("kurs", kurs_command))
    application.add_handler(CommandHandler("all", all_command))
    application.add_handler(CommandHandler("cancel", cancel_command))

    # –ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    application.add_handler(MessageHandler(filters.Text(["–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø–æ—Å–ª—É–≥—É"]), book_service))
    application.add_handler(MessageHandler(filters.Text(["–ö–û–°–ú–ï–¢–ò–ö–ê"]), cosmetics))
    application.add_handler(MessageHandler(filters.Text(["–Ü–°–¢–û–†–Ü–Ø"]), show_records_menu))
    application.add_handler(MessageHandler(filters.Text(["–ü—Ä–æ –Ω–∞—Å"]), about_us))
    

    
    

    # –ú–µ–Ω—é –∞–¥–º—ñ–Ω–∞
    application.add_handler(MessageHandler(filters.Text(["üìÖ –ó–∞–ø–∏—Å–∏"]), admin_bookings_menu))
    application.add_handler(MessageHandler(filters.Text(["üë§ –ö–ª—ñ—î–Ω—Ç–∏"]), show_client_menu))
    # –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É –∑—Ä–æ–±–∏–º–æ, —â–æ –∫–Ω–æ–ø–∫–∞ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –≤—ñ–¥–∫—Ä–∏–≤–∞—î admin_analytics (–∞–±–æ show_clients ‚Äî —è–∫ –±—É–ª–æ)
    application.add_handler(MessageHandler(filters.Text(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]), show_statistics_menu))
    application.add_handler(MessageHandler(filters.Text(["üíá‚Äç‚ôÇÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–ª—É–≥"]), show_services_settings_menu))
    application.add_handler(MessageHandler(filters.Text(["üìÜ –†–æ–∑–∫–ª–∞–¥"]), show_schedule_menu))
    application.add_handler(MessageHandler(filters.Text(["‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"]), show_messages))
    application.add_handler(MessageHandler(filters.Text(["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"]), bot_settings))
    application.add_handler(CallbackQueryHandler(show_records, pattern=r"^records_(confirmed|rejected|past)$"))
    application.add_handler(CallbackQueryHandler(lambda update, context: send_filtered_records_pdf(update, context, update.callback_query.data.split("_")[2]), pattern=r"^all_records_.*$"))
    application.add_handler(CallbackQueryHandler(lambda update, context: handle_date_input(update, context), pattern=r"^records_by_date$"))
    application.add_handler(MessageHandler(filters.Regex(r"^\d{2}\.\d{2}\.\d{4}$"), handle_date_input))

    # –û–∫—Ä–µ–º–æ —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "broadcast_message"
    application.add_handler(CallbackQueryHandler(broadcast_message_button, pattern="^broadcast_message$"))
    # –û—Å–Ω–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–ª–±–µ–∫—ñ–≤ (—É—Å—ñ —ñ–Ω—à—ñ callback_data)
    application.add_handler(CallbackQueryHandler(button_handler))

    # –¢–µ–∫—Å—Ç (–∞–¥–º—ñ–Ω-—Å—Ç–µ–π—Ç–∏ + —Ä–æ–∑—Å–∏–ª–∫–∞)
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_admin_text_states))

    # JobQueue –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å (—â–æ–≥–æ–¥–∏–Ω–∏)
    job_queue = application.job_queue
    job_queue.run_repeating(send_reminders, interval=3600, first=0)

    application.run_polling(timeout=60)


if __name__ == "__main__":
    main()
